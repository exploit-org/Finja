package org.exploit.btc.generator;

import org.exploit.btc.utils.Witness;
import org.exploit.crypto.curve.Secp256k1Provider;
import org.exploit.crypto.key.ECKeyPair;
import org.exploit.crypto.key.ECPublicKey;
import org.exploit.finja.core.constant.Asset;
import org.exploit.finja.core.model.CommonAddress;

import static org.exploit.crypto.Hash.ripeMd160;
import static org.exploit.crypto.Hash.sha256;

public class SegWitAddressGenerator implements BitcoinAddressGenerator {
    private final Asset asset;
    private final String hrp;

    public SegWitAddressGenerator(Asset asset, String hrp) {
        this.asset = asset;
        this.hrp = hrp;
    }

    @Override
    public CommonAddress generate() {
        var keyPair = Secp256k1Provider.getInstance().generateKeyPair();
        return generate(keyPair);
    }

    @Override
    public CommonAddress generate(ECKeyPair keyPair) {
        var publicAddress = encodePublicAddress(keyPair.publicKey());
        var ecKey = keyPair.privateKey();

        var privateKey = (ecKey != null) ? ecKey.encoded() : null;

        return new CommonAddress(publicAddress, privateKey);
    }

    @Override
    public Asset asset() {
        return asset;
    }

    @Override
    public String encodePublicAddress(ECPublicKey publicKey) {
        var encodedPublicKey = publicKey.compress();
        var ripedBytes = ripeMd160(sha256(encodedPublicKey));

        return Witness.encode((byte) 0, hrp, ripedBytes);
    }
}
