package org.exploit.btc.protocol;

import lombok.RequiredArgsConstructor;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.encoders.Hex;
import org.exploit.btc.constant.Flag;
import org.exploit.btc.service.TxSender;
import org.exploit.crypto.Hash;
import org.exploit.finja.core.OutgoingTransaction;
import org.exploit.finja.core.model.Receipt;

@RequiredArgsConstructor
public class BitcoinOutgoing implements OutgoingTransaction {
    private final Transaction transaction;
    private final TxSender transactionService;

    @Override
    public String dump() {
        return Hex.toHexString(transaction.serialize(0));
    }

    @Override
    public String computeTxid() {
        if (transaction.hasWitness())
            return Hex.toHexString(Arrays.reverse(Hash.doubleSha256(transaction.serialize(Flag.SERIALIZE_NO_WITNESS))));

        return Hex.toHexString(Arrays.reverse(Hash.doubleSha256(transaction.serialize(0))));
    }

    @Override
    public Receipt send() {
        return transactionService.sendTransaction(transaction);
    }

    @Override
    public long fee() {
        return transaction.getFee();
    }
}
