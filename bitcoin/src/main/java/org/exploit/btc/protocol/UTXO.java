package org.exploit.btc.protocol;

import at.favre.lib.bytes.Bytes;
import lombok.RequiredArgsConstructor;
import org.bouncycastle.util.encoders.Hex;

import java.math.BigInteger;
import java.util.Objects;

@RequiredArgsConstructor
public class UTXO {
    private final String hash;
    private final int vout;
    private final String script;
    private final long amount;
    private final int confirmations;

    public TxIn createInput() {
        var txin = new TxIn();
        txin.setAmount(amount);
        txin.setRelatedUTXO(this);
        txin.setOutPoint(new OutPoint(Hex.decode(hash), vout));

        return txin;
    }

    public static String reverse(String txid) {
        return Bytes.wrap(Hex.decode(txid)).reverse().encodeHex();
    }

    public TxOut createOutput() {
        return new TxOut(BigInteger.valueOf(amount), Script.parseHex(script));
    }

    public String hash() {
        return hash;
    }

    public int vout() {
        return vout;
    }

    public String script() {
        return script;
    }

    public long amount() {
        return amount;
    }

    public int confirmations() {
        return confirmations;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) return true;
        if (obj == null || obj.getClass() != this.getClass()) return false;
        var that = (UTXO) obj;
        return Objects.equals(this.hash, that.hash) &&
                this.vout == that.vout &&
                Objects.equals(this.script, that.script) &&
                this.amount == that.amount &&
                this.confirmations == that.confirmations;
    }

    @Override
    public int hashCode() {
        return Objects.hash(hash, vout, script, amount, confirmations);
    }

    @Override
    public String toString() {
        return "UTXO[" +
                "hash=" + hash + ", " +
                "vout=" + vout + ", " +
                "script=" + script + ", " +
                "amount=" + amount + ", " +
                "confirmations=" + confirmations + ']';
    }

}