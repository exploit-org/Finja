package org.exploit.btc.protocol;

import org.exploit.btc.stereotype.BtcSerializable;
import org.exploit.btc.utils.Serializer;
import org.exploit.btc.utils.VarInt;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.List;

import static org.exploit.btc.constant.Flag.SERIALIZE_NO_WITNESS;

public final class ScriptWitness implements BtcSerializable {
    private final List<ByteBuffer> buffers;

    public ScriptWitness(List<ByteBuffer> buffers) {
        this.buffers = buffers;
    }

    public ScriptWitness() {
        this(new ArrayList<>());
    }

    public ScriptWitness push(Script script) {
        push(Serializer.serialize(script));
        return this;
    }

    public ScriptWitness push(byte[] bytes) {
        buffers.add(ByteBuffer.wrap(bytes));
        return this;
    }

    public boolean isEmpty() {
        return buffers.isEmpty();
    }

    @Override
    public byte[] serialize(int flags) {
        if ((flags & SERIALIZE_NO_WITNESS) == SERIALIZE_NO_WITNESS)
            return new byte[0];

        try (var out = new ByteArrayOutputStream()) {
            var length = new VarInt(buffers.size()).encode(ByteOrder.LITTLE_ENDIAN);
            out.write(length);

            for (var buf : buffers)
                out.write(writeAsBytes(buf));

            return out.toByteArray();
        } catch (IOException e) {
            throw new IllegalStateException(e);
        }
    }

    private byte[] writeAsBytes(ByteBuffer buffer) {
        var bytes = buffer.array();
        var length = new VarInt(bytes.length).encode(ByteOrder.LITTLE_ENDIAN);

        try (var out = new ByteArrayOutputStream()) {
            out.write(length);
            out.write(bytes);

            return out.toByteArray();
        } catch (IOException e) {
            throw new IllegalStateException(e);
        }
    }
}
