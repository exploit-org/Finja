package org.exploit.btc.utils;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class VarInt {
    private final long value;

    public VarInt(long value) {
        this.value = value;
    }

    public byte[] encode(ByteOrder byteOrder) {
        ByteBuffer buffer;

        if (value < 0xfd) {
            buffer = ByteBuffer.allocate(1);
            buffer.put((byte) value);
        } else if (value <= 0xffff) {
            buffer = ByteBuffer.allocate(3);
            buffer.order(byteOrder);

            buffer.put((byte) 0xfd);
            buffer.putShort((short) value);
        } else if (value <= 0xffffffffL) {
            buffer = ByteBuffer.allocate(5);
            buffer.order(byteOrder);

            buffer.put((byte) 0xfe);
            buffer.putInt((int) value);
        } else {
            buffer = ByteBuffer.allocate(9);
            buffer.order(byteOrder);

            buffer.put((byte) 0xff);
            buffer.putLong(value);
        }

        return buffer.array();
    }

    public static VarInt fromBytes(byte[] bytes, ByteOrder byteOrder) {
        var buffer = ByteBuffer.wrap(bytes);
        buffer.order(byteOrder);

        long value;

        var firstByte = buffer.get();

        if (firstByte < (byte) 0xfd) {
            value = firstByte;
        } else if (firstByte == (byte) 0xfd) {
            value = buffer.getShort();
        } else if (firstByte == (byte) 0xfe) {
            value = buffer.getInt();
        } else {
            value = buffer.getLong();
        }

        return new VarInt(value);
    }
}