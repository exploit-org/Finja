package org.exploit.btc.utils;

import org.exploit.btc.constant.OpCode;
import org.exploit.btc.protocol.Script;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.Optional;

public final class Serializer {
    private Serializer() {
    }

    public static byte[] serialize(Script script) {
        var commands = Optional.ofNullable(script).map(Script::getCommands)
                .orElse(new ArrayList<>());

        try (var outputStream = new ByteArrayOutputStream()) {
            for (var command : commands) {
                if (command instanceof OpCode) {
                    outputStream.write(((OpCode) command).getValue());
                    continue;
                }

                if (command instanceof byte[] data) {
                    writeDataLength(outputStream, data.length);
                    outputStream.write(data);
                }
            }

            return outputStream.toByteArray();
        } catch (IOException e) {
            throw new IllegalStateException(e);
        }
    }

    private static void writeDataLength(ByteArrayOutputStream outputStream, int length) throws IOException {
        outputStream.write(new VarInt(length).encode(ByteOrder.LITTLE_ENDIAN));
    }
}