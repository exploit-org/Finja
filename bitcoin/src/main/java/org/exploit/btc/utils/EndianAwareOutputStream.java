package org.exploit.btc.utils;

import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class EndianAwareOutputStream extends ByteArrayOutputStream {
    private ByteOrder order;

    public EndianAwareOutputStream() {
        this(ByteOrder.BIG_ENDIAN);
    }

    public EndianAwareOutputStream(ByteOrder order) {
        super();
        this.order = order;
    }

    public void writeInt(int value) {
        var buffer = ByteBuffer.allocate(Integer.BYTES).order(order).putInt(value);
        write(buffer.array(), 0, buffer.array().length);
    }

    public void writeLong(long value) {
        var buffer = ByteBuffer.allocate(Long.BYTES).order(order).putLong(value);
        write(buffer.array(), 0, buffer.array().length);
    }

    public void writeShort(short value) {
        var buffer = ByteBuffer.allocate(Short.BYTES).order(order).putShort(value);
        write(buffer.array(), 0, buffer.array().length);
    }

    public void writeFloat(float value) {
        var buffer = ByteBuffer.allocate(Float.BYTES).order(order).putFloat(value);
        write(buffer.array(), 0, buffer.array().length);
    }

    public void writeDouble(double value) {
        var buffer = ByteBuffer.allocate(Double.BYTES).order(order).putDouble(value);
        write(buffer.array(), 0, buffer.array().length);
    }

    public void setByteOrder(ByteOrder order) {
        this.order = order;
    }

    public ByteOrder getByteOrder() {
        return order;
    }
}
