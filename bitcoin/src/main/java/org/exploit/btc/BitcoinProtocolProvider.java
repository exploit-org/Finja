package org.exploit.btc;

import org.exploit.btc.address.BigBitcoinProtocolWallet;
import org.exploit.btc.address.BitcoinProtocolWallet;
import org.exploit.btc.constant.AddressType;
import org.exploit.btc.explorer.BitcoinExplorer;
import org.exploit.btc.fee.BitcoinFeeProvider;
import org.exploit.btc.generator.BitcoinAddressGenerator;
import org.exploit.btc.model.BitcoinMeta;
import org.exploit.btc.protocol.script.BitcoinScript;
import org.exploit.btc.service.BalanceService;
import org.exploit.btc.validator.BitcoinProtocolAddressValidator;
import org.exploit.crypto.constant.SupportedCurve;
import org.exploit.finja.core.*;
import org.exploit.finja.core.constant.NetworkType;
import org.exploit.finja.core.key.ECKeyManager;
import org.exploit.finja.core.key.Secp256k1KeyManager;
import org.exploit.finja.listener.ListenerProvider;
import org.exploit.secp256k1.Secp256k1PointOps;
import org.exploit.signalix.manager.EventScope;
import org.exploit.sodium.ReadOnlyBuffer;

import java.util.List;

public interface BitcoinProtocolProvider extends CoinProvider<Secp256k1PointOps> {
    BitcoinExplorer explorer();

    BitcoinMeta meta();

    ListenerProvider<BitcoinProtocolProvider> listenerProvider();

    BitcoinFeeProvider feeProvider();

    BitcoinAddressGenerator generator(NetworkType network, AddressType type);

    BigBitcoinProtocolWallet createBigWallet(List<BitcoinProtocolWallet> wallets);

    default BitcoinProtocolWallet createWallet(NetworkType network, AddressType type, ECKeyManager<Secp256k1PointOps> keyManager) {
        var publicAddress = generator(network, type).encodePublicAddress(keyManager.getPublicKey());
        return (BitcoinProtocolWallet) createWallet(publicAddress, keyManager);
    }

    @Override
    default BitcoinProtocolWallet createWallet(ECKeyManager<Secp256k1PointOps> keyManager) {
        return createWallet(meta().network(), meta().generatorType(), keyManager);
    }

    @Override
    default CryptoWallet createWallet(ReadOnlyBuffer privateKey) {
        return createWallet(new Secp256k1KeyManager(privateKey));
    }

    @Override
    default CryptoWallet createWallet(String publicAddress, ReadOnlyBuffer privateKey) {
        return createWallet(publicAddress, new Secp256k1KeyManager(privateKey));
    }

    @Override
    default AddressValidator validator() {
        return new BitcoinProtocolAddressValidator(this);
    }

    @Override
    default CoinBalanceService balanceService() {
        return new BalanceService(this);
    }

    @Override
    default EventFetcher eventFetcher() {
        return explorer().createEventFetcher(this);
    }

    @Override
    default AddressGenerator<Secp256k1PointOps> generator() {
        return generator(meta().network(), meta().generatorType());
    }

    BitcoinScript getScript(String address);

    @Override
    default TransactionListener listener(EventScope eventScope) {
        return listenerProvider().createListener(this, eventScope);
    }

    @Override
    default SupportedCurve curve() {
        return SupportedCurve.SECP256K1;
    }
}