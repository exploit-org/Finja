package org.exploit.btc.helper;

import org.exploit.btc.protocol.Script;
import org.exploit.btc.protocol.Transaction;
import org.exploit.btc.protocol.TxIn;
import org.exploit.btc.protocol.script.*;

import java.util.ArrayList;
import java.util.List;

public final class TxUtils {
    private TxUtils() {
    }

    public static TxIn removeSignatureScript(TxIn txIn) {
        return txIn.copy(Script.create());
    }

    public static Transaction removeAllSignatureScripts(Transaction tx) {
        var noScriptInputs = tx.getInputs()
                .stream()
                .map(TxUtils::removeSignatureScript)
                .toList();

        return tx.copy(noScriptInputs);
    }

    public static List<TxIn> resetSequence(List<TxIn> txIns, int index) {
        var copiedList = new ArrayList<>(txIns.stream()
                .map(TxIn::copy)
                .toList());

        for (var i = 0; i < txIns.size(); i++)
            if (i != index) copiedList.get(i).setSequence(0L);

        return copiedList;
    }

    public static int estimateSize(BitcoinScript script, int inputCount, int outputCount) {
        if (script instanceof P2PKHScript) {
            return 10 + inputCount * 148 + outputCount * 34;
        } else if (script instanceof P2WPKHScript) {
            return 11 + inputCount * 68 + outputCount * 31;
        } else if (script instanceof P2SHScript) {
            return 10 + inputCount * 148 + outputCount * 34;
        } else if (script instanceof P2WSHScript) {
            return 11 + inputCount * 68 + outputCount * 31;
        } else if (script instanceof P2TRScript) {
            return (int) (10.5 + inputCount * 57.5 + outputCount * 43);
        } else {
            throw new IllegalArgumentException("Unknown script type: " + script.getClass().getName());
        }
    }
}