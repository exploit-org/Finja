package org.exploit.btc.service;

import org.bouncycastle.util.encoders.Hex;
import org.exploit.btc.BitcoinProtocolProvider;
import org.exploit.btc.constant.SigHash;
import org.exploit.btc.constant.TxFormat;
import org.exploit.btc.helper.TransactionCreator;
import org.exploit.btc.helper.TxSigner;
import org.exploit.btc.model.SigData;
import org.exploit.btc.model.SignatureData;
import org.exploit.btc.protocol.BitcoinOutgoing;
import org.exploit.btc.protocol.Transaction;
import org.exploit.finja.core.OutgoingTransaction;
import org.exploit.finja.core.model.Receipt;
import org.exploit.finja.core.model.Recipient;

import java.util.List;

public class TxSender {
    private final BitcoinProtocolProvider provider;
    private final TransactionCreator creator;

    public TxSender(BitcoinProtocolProvider provider, TransactionCreator creator) {
        this.provider = provider;
        this.creator = creator;
    }

    public OutgoingTransaction createTransaction(SignatureData keyData, String from, List<Recipient> recipients, int flags, int sigHash) {
        var sigVersion = keyData.getScript().isSegWit() ? SigHash.SigVersion.SIGVERSION_WITNESS_V0
                : keyData.getScript().isTaproot() ? SigHash.SigVersion.SIGVERSION_TAPROOT
                : SigHash.SigVersion.SIGVERSION_BASE;

        var sigData = SigData.of(sigHash, sigVersion);
        var format = keyData.getScript().isSegWit() ? TxFormat.SEGWIT
                : keyData.getScript().isTaproot() ? TxFormat.TAPROOT
                : TxFormat.LEGACY;

        var utxos = provider.explorer().utxos(from);
        var tx = creator.createTransaction(provider.asset(), format, from, utxos, recipients, flags);
        var signed = TxSigner.sign(keyData, tx, utxos, sigData);

        return new BitcoinOutgoing(signed, this);
    }

    public Receipt sendTransaction(Transaction transaction) {
        var serializedTransaction = transaction.serialize(0);
        var hex = Hex.toHexString(serializedTransaction);

        var txid =  provider.explorer().push(hex);

        return new Receipt(txid, transaction.getFee());
    }
}