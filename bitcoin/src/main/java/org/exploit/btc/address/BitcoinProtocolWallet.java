package org.exploit.btc.address;

import lombok.Getter;
import org.exploit.btc.BitcoinProtocolProvider;
import org.exploit.btc.constant.SigHash;
import org.exploit.btc.helper.TransactionCreator;
import org.exploit.btc.model.SignatureData;
import org.exploit.btc.protocol.script.BitcoinScript;
import org.exploit.btc.service.TxSender;
import org.exploit.finja.core.CoinBalanceService;
import org.exploit.finja.core.CryptoWallet;
import org.exploit.finja.core.OutgoingTransaction;
import org.exploit.finja.core.key.ECKeyManager;
import org.exploit.finja.core.model.Amount;
import org.exploit.finja.core.model.Recipient;
import org.exploit.finja.core.model.Value;
import org.exploit.secp256k1.Secp256k1PointOps;

import java.util.List;

public abstract class BitcoinProtocolWallet implements CryptoWallet {
    protected final String address;

    protected final TxSender transactionService;
    protected final CoinBalanceService balanceService;

    @Getter
    protected final BitcoinScript script;

    @Getter
    protected final SignatureData keyData;

    public BitcoinProtocolWallet(BitcoinProtocolProvider provider, String address, ECKeyManager<Secp256k1PointOps> signer) {
        this.address = address;
        this.script = provider.getScript(address);
        this.keyData = SignatureData.of(address, script, signer);
        this.transactionService = new TxSender(provider, TransactionCreator.create(provider));
        this.balanceService = provider.balanceService();
    }

    @Override
    public OutgoingTransaction transaction(String to, Amount amount, int flags) {
        return transaction(List.of(new Recipient() {{
            setAddress(to);
            setAmount(amount);
        }}), flags);
    }

    @Override
    public OutgoingTransaction transaction(List<Recipient> recipients, int flags) {
        return transactionService.createTransaction(keyData, address, recipients, flags, SigHash.SIGHASH_ALL);
    }

    @Override
    public String publicAddress() {
        return address;
    }

    @Override
    public Value balance() {
        return balanceService.balance(address);
    }

    @Override
    public void erase() {
        keyData.erase();
    }
}
