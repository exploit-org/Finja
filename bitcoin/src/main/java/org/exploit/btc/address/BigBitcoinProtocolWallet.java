package org.exploit.btc.address;

import lombok.Getter;
import org.exploit.btc.BitcoinProtocolProvider;
import org.exploit.btc.constant.SigHash;
import org.exploit.btc.helper.TransactionCreator;
import org.exploit.btc.service.TxSender;
import org.exploit.finja.core.OutgoingTransaction;
import org.exploit.finja.core.model.Recipient;

import java.util.List;

@Getter
public class BigBitcoinProtocolWallet {
    private final BitcoinProtocolProvider provider;
    private final List<BitcoinProtocolWallet> wallets;
    private final TxSender sender;
    private final int defaultSigHash;

    public BigBitcoinProtocolWallet(BitcoinProtocolProvider provider, List<BitcoinProtocolWallet> wallets, int defaultSigHash) {
        this.provider = provider;
        this.wallets = wallets;
        this.sender = new TxSender(provider, TransactionCreator.create(provider));
        this.defaultSigHash = defaultSigHash;
    }

    public OutgoingTransaction transaction(List<Recipient> recipients, String changeAddress, int flags, int sigHash) {
        return sender.createMassTransaction(changeAddress, wallets.stream().map(BitcoinProtocolWallet::getKeyData)
                .toList(), recipients, flags, sigHash);
    }

    public OutgoingTransaction transaction(List<Recipient> recipients, String changeAddress, int flags) {
        return sender.createMassTransaction(changeAddress, wallets.stream().map(BitcoinProtocolWallet::getKeyData)
                .toList(), recipients, flags, SigHash.SIGHASH_ALL);
    }

    public OutgoingTransaction transaction(List<Recipient> recipients, String changeAddress) {
        return sender.createMassTransaction(changeAddress, wallets.stream().map(BitcoinProtocolWallet::getKeyData)
                .toList(), recipients, 0, SigHash.SIGHASH_ALL);
    }
}
