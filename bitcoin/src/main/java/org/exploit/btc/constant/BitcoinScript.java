package org.exploit.btc.constant;

import org.exploit.btc.protocol.Script;
import org.exploit.btc.utils.Witness;
import org.exploit.crypto.Base58;
import org.exploit.crypto.key.ECPublicKey;
import org.exploit.secp256k1.Secp256k1PointOps;

import static org.exploit.btc.constant.OpCode.*;

public enum BitcoinScript {
    P2PKH {
        @Override
        public Script createScript(byte[] hash) {
            return new Script()
                    .op(OP_DUP)
                    .op(OP_HASH160)
                    .push(hash)
                    .op(OP_EQUALVERIFY)
                    .op(OP_CHECKSIG);
        }

        @Override
        public byte[] extractHash(String address) {
            return Base58.getInstance().decodeCheck(address).second();
        }
    },

    P2WPKH {
        @Override
        public Script createScript(byte[] hash) {
            return new Script()
                    .op(OP_0)
                    .push(hash);
        }

        @Override
        public Script createSignatureScript(byte[] signature, ECPublicKey<Secp256k1PointOps> publicKey) {
            throw new UnsupportedOperationException();
        }

        @Override
        public byte[] extractHash(String address) {
            return Witness.decode(address);
        }
    },

    P2SH {
        @Override
        public Script createScript(byte[] hash) {
            return new Script()
                    .op(OP_HASH160)
                    .push(hash)
                    .op(OP_EQUAL);
        }

        @Override
        public byte[] extractHash(String address) {
            return Base58.getInstance().decodeCheck(address).second();
        }
    },

    P2WSH {
        @Override
        public Script createScript(byte[] hash) {
            return new Script()
                    .op(OP_0)
                    .push(hash);
        }

        @Override
        public Script createSignatureScript(byte[] signature, ECPublicKey<Secp256k1PointOps> publicKey) {
            throw new UnsupportedOperationException();
        }

        @Override
        public byte[] extractHash(String address) {
            return Witness.decode(address);
        }
    };

    public abstract Script createScript(byte[] hash);

    public Script createSignatureScript(byte[] signature, ECPublicKey<Secp256k1PointOps> publicKey) {
        return new Script()
                .push(signature)
                .push(publicKey.compress());
    }

    public boolean isSegWit() {
        return this == P2WSH || this == P2WPKH;
    }

    public abstract byte[] extractHash(String address);
}
