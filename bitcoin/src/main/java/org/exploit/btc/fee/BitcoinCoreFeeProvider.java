package org.exploit.btc.fee;

import org.exploit.btc.api.BitcoinCoreApi;
import org.exploit.btc.constant.FeePolicy;
import org.exploit.finja.core.ValueConverter;
import org.exploit.finja.core.converter.MathConstantConverter;
import org.exploit.finja.core.model.JsonRpc;
import org.exploit.finja.core.model.WebData;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.List;
import java.util.UUID;

public class BitcoinCoreFeeProvider implements BitcoinFeeProvider {
    private final BitcoinCoreApi api;
    private final ValueConverter converter;

    public BitcoinCoreFeeProvider(WebData webData, ValueConverter converter) {
        this.api = BitcoinCoreApi.create(webData);
        this.converter = converter;
    }

    public BitcoinCoreFeeProvider(WebData webData) {
        this(webData, new MathConstantConverter(8));
    }

    @Override
    public BigDecimal slow() {
        return estimateFee(6);
    }

    @Override
    public BigDecimal normal() {
        return estimateFee(4);
    }

    @Override
    public BigDecimal fast() {
        return estimateFee(2);
    }

    @Override
    public BigDecimal estimate(FeePolicy feePolicy) {
        return switch (feePolicy) {
            case NO_PRIORITY -> estimateFee(1008);
            case SLOW -> slow();
            case NORMAL -> normal();
            case FAST -> fast();
        };
    }

    private BigDecimal estimateFee(int blocks) {
        var body = JsonRpc.newBuilder()
                .id(UUID.randomUUID().toString())
                .method("estimatesmartfee")
                .params(List.of(blocks, "ECONOMICAL"))
                .build();

        var result = api.estimateSmartFee(body).result().feerate();

        return new BigDecimal(converter.toUnit(new BigDecimal(result)))
                .divide(BigDecimal.valueOf(1024), new MathContext(8, RoundingMode.HALF_EVEN));
    }
}
