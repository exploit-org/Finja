package org.exploit.finja.core.key;

import org.exploit.crypto.curve.Ed25519Provider;
import org.exploit.crypto.key.ECPublicKey;
import org.exploit.crypto.key.ed25519.Ed25519KeyPair;
import org.exploit.crypto.key.ed25519.Ed25519PrivateKey;
import org.exploit.ed25519.Ed25519PointOps;
import org.exploit.sodium.ReadOnlyBuffer;
import org.exploit.tss.signature.Signature;

public class Ed25519KeyManager implements ECKeyManager<Ed25519PointOps> {
    private final Ed25519PrivateKey privateKey;

    public Ed25519KeyManager(ReadOnlyBuffer privateKey) {
        this.privateKey = new Ed25519PrivateKey(privateKey);
    }

    public Ed25519KeyManager(byte[] privateKey) {
        this(new ReadOnlyBuffer(privateKey));
    }

    @Override
    public Signature sign(byte[] data, int flags) {
        return Ed25519Provider.getInstance().sign(data, Ed25519KeyPair.create(privateKey));
    }

    @Override
    public ECPublicKey<Ed25519PointOps> getPublicKey() {
        return Ed25519Provider.getInstance().getPublicKey(privateKey);
    }

    @Override
    public void erase() {
        privateKey.erase();
    }
}
