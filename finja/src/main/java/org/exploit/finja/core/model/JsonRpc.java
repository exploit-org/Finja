package org.exploit.finja.core.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.exploit.finja.utils.Jackson;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

public record JsonRpc(
        @JsonProperty("jsonrpc")
        String jsonRpc,

        String id,
        String method,

        List<Object> params
) {
    public JsonRpc(String id, String method, List<Object> params) {
        this("2.0", id, method, params);
    }

    public JsonRpc(String method, List<Object> params) {
        this(String.valueOf(ThreadLocalRandom.current().nextInt()), method, params);
    }

    public JsonRpc() {
        this("", "", "", Collections.emptyList());
    }

    public String asString() {
        return Jackson.writeAsString(this);
    }

    public static class Builder {
        private String jsonRpc;
        private String id;
        private String method;
        private List<Object> params;

        public Builder jsonRpc(String jsonRpc) {
            this.jsonRpc = jsonRpc;
            return this;
        }

        public Builder id(String id) {
            this.id = id;
            return this;
        }

        public Builder method(String method) {
            this.method = method;
            return this;
        }

        public Builder params(List<Object> params) {
            this.params = params;
            return this;
        }

        public JsonRpc build() {
            var jsonRpc = this.jsonRpc == null ? "2.0" : this.jsonRpc;
            var id = this.id == null || this.id.isEmpty() ? String.valueOf(ThreadLocalRandom.current().nextInt()) : this.id;

            if (method == null)
                throw new IllegalStateException("Method can not be null");

            return new JsonRpc(jsonRpc, id, method, params);
        }
    }

    public static Builder newBuilder() {
        return new Builder();
    }
}