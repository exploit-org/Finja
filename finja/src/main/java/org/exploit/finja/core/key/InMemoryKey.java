package org.exploit.finja.core.key;

import org.exploit.crypto.constant.SupportedCurve;
import org.exploit.crypto.curve.Ed25519Provider;
import org.exploit.crypto.curve.Secp256k1Provider;
import org.exploit.crypto.key.ECPublicKey;
import org.exploit.crypto.key.ed25519.Ed25519KeyPair;
import org.exploit.crypto.key.ed25519.Ed25519PrivateKey;
import org.exploit.crypto.key.secp256k1.Secp256k1KeyPair;
import org.exploit.crypto.key.secp256k1.Secp256k1PrivateKey;
import org.exploit.crypto.signature.Signature;
import org.exploit.finja.core.key.flag.ECFlag;
import org.exploit.finja.utils.SensitiveBytes;
import org.owasp.netryx.memory.SecureMemory;

public class InMemoryKey implements ECKeyManager {
    private final SupportedCurve curve;
    private final SecureMemory privateKey;

    public InMemoryKey(SupportedCurve curve, SecureMemory privateKey) {
        this.curve = curve;
        this.privateKey = privateKey;
    }

    public InMemoryKey(SupportedCurve curve, byte[] privateKey) {
        this(curve, SensitiveBytes.write(privateKey));
    }

    @Override
    public Signature sign(byte[] data, int flags) {
        return switch (curve) {
            case SECP256K1 -> {
                var keyPair = Secp256k1KeyPair.create(Secp256k1PrivateKey.create(privateKey));

                if ((flags & ECFlag.USE_TAPROOT_SCHNORR) != 0)
                    yield Secp256k1Provider.getInstance().schnorr().sign(keyPair.privateKey(), data);

                yield Secp256k1Provider.getInstance().sign(data, keyPair);
            }

            case ED25519 -> {
                var edd25519key = Ed25519PrivateKey.create(privateKey);
                yield Ed25519Provider.getInstance().sign(data, Ed25519KeyPair.create(edd25519key));
            }
        };
    }

    @Override
    public ECPublicKey getPublicKey() {
        return switch (curve) {
            case SECP256K1 -> {
                var secp256key = Secp256k1PrivateKey.create(privateKey);
                yield Secp256k1Provider.getInstance().getPublicKey(secp256key);
            }
            case ED25519 -> {
                var edd25519key = Ed25519PrivateKey.create(privateKey);
                yield Ed25519Provider.getInstance().getPublicKey(edd25519key);
            }
        };
    }

    @Override
    public void erase() {
        privateKey.close();
    }
}
