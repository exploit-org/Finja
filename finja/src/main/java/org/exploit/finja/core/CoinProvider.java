package org.exploit.finja.core;

import org.exploit.crypto.constant.SupportedCurve;
import org.exploit.finja.core.constant.Asset;
import org.exploit.finja.core.key.ECKeyManager;
import org.exploit.finja.core.model.CommonAddress;
import org.exploit.signalix.manager.EventScope;
import org.exploit.sodium.ReadOnlyBuffer;
import org.exploit.tss.curve.PointOps;

public interface CoinProvider<P extends PointOps<P>> {
    Asset asset();

    CryptoWallet createWallet(String publicAddress, ECKeyManager<P> keyManager);

    CryptoWallet createWallet(ECKeyManager<P> keyManager);

    TransactionListener listener(EventScope eventScope);

    AddressGenerator<P> generator();

    ValueConverter converter();

    CoinBalanceService balanceService();

    EventFetcher eventFetcher();

    AddressValidator validator();

    SupportedCurve curve();

    CryptoWallet createWallet(ReadOnlyBuffer privateKey);

    CryptoWallet createWallet(String publicAddress, ReadOnlyBuffer privateKey);

    default CryptoWallet createWallet(String publicAddress, byte[] privateKey) {
        return createWallet(publicAddress, new ReadOnlyBuffer(privateKey));
    }

    default CryptoWallet createWallet(CommonAddress commonAddress) {
        return createWallet(commonAddress.publicAddress(), commonAddress.privateKey());
    }

    default CryptoWallet createWallet(byte[] privateKey) {
        return createWallet(new ReadOnlyBuffer(privateKey));
    }
}
