package org.exploit.finja.core;

import org.exploit.crypto.constant.SupportedCurve;
import org.exploit.finja.core.constant.Asset;
import org.exploit.finja.core.key.ECKeyManager;
import org.exploit.finja.core.key.InMemoryKey;
import org.exploit.finja.core.model.CommonAddress;
import org.exploit.signalix.manager.EventScope;
import org.owasp.netryx.memory.SecureMemory;

public interface CoinProvider {
    Asset asset();

    CryptoWallet createWallet(String publicAddress, ECKeyManager keyManager);

    CryptoWallet createWallet(ECKeyManager keyManager);

    TransactionListener listener(EventScope eventScope);

    AddressGenerator generator();

    ValueConverter converter();

    CoinBalanceService balanceService();

    EventFetcher eventFetcher();

    AddressValidator validator();

    SupportedCurve curve();

    default CryptoWallet createWallet(CommonAddress commonAddress) {
        return createWallet(commonAddress.publicAddress(), new InMemoryKey(curve(), commonAddress.privateKey()));
    }

    default CryptoWallet createWallet(String publicAddress, SecureMemory privateKey) {
        return createWallet(publicAddress, new InMemoryKey(curve(), privateKey));
    }

    default CryptoWallet createWallet(String publicAddress, byte[] privateKey) {
        return createWallet(publicAddress, new InMemoryKey(curve(), privateKey));
    }

    default CryptoWallet createWallet(SecureMemory privateKey) {
        return createWallet(new InMemoryKey(curve(), privateKey));
    }

    default CryptoWallet createWallet(byte[] privateKey) {
        return createWallet(new InMemoryKey(curve(), privateKey));
    }
}
