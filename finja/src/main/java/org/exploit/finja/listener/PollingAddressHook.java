package org.exploit.finja.listener;

import lombok.Getter;
import org.exploit.finja.core.event.TxnCancelledEvent;
import org.exploit.finja.core.event.TxnEvent;
import org.exploit.signalix.marker.Event;

import java.util.*;

@Getter
public class PollingAddressHook {
    private final Map<String, TxnEvent> events = new HashMap<>();

    private final String address;
    private final long timestamp;

    public PollingAddressHook(String address, long timestamp) {
        this.address = address;
        this.timestamp = timestamp;
    }

    public void addEvent(TxnEvent e) {
        events.put(e.getTxid(), e);
    }

    public Set<Event> processEvents(Collection<TxnEvent> newEvents) {
        Set<Event> updatedEvents = new HashSet<>();

        removeAbsentEvents(newEvents, updatedEvents);
        addOrUpdateEvents(newEvents, updatedEvents);

        return updatedEvents;
    }

    private void removeAbsentEvents(Collection<TxnEvent> newEvents, Set<Event> updatedEvents) {
        var iterator = events.entrySet().iterator();

        while (iterator.hasNext()) {
            var entry = iterator.next();
            if (newEvents.stream().noneMatch(e -> e.getTxid().equals(entry.getKey()))) {
                iterator.remove();
                updatedEvents.add(new TxnCancelledEvent(entry.getValue()));
            }
        }
    }

    private void addOrUpdateEvents(Collection<TxnEvent> newEvents, Set<Event> updatedEvents) {
        for (var newEvent : newEvents) {
            var existingEvent = events.put(newEvent.getTxid(), newEvent);

            if (existingEvent == null || !existingEvent.equals(newEvent)) {
                updatedEvents.add(newEvent);
            }
        }
    }
}
