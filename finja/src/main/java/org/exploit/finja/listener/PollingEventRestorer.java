package org.exploit.finja.listener;

import lombok.RequiredArgsConstructor;
import org.exploit.finja.core.EventFetcher;
import org.exploit.finja.core.event.TxnEvent;
import reactor.core.publisher.Flux;

import java.util.List;
import java.util.Set;

@RequiredArgsConstructor
public class PollingEventRestorer {
    private final EventFetcher fetcher;

    public Flux<TxnEvent> restore(Set<PollingAddressHook> hooks, String address, long timestamp) {
        return fetcher.events(address, timestamp)
                .collectList()
                .doOnNext(list -> restore(hooks, address, timestamp, list))
                .flatMapMany(Flux::fromIterable);
    }

    private void restore(Set<PollingAddressHook> hooks, String address, long timestamp, List<TxnEvent> list) {
        hooks.stream().filter(hook -> hook.getAddress().equals(address))
                .findFirst()
                .ifPresentOrElse(hook -> hook.processEvents(list), () -> {
                    var hook = new PollingAddressHook(address, timestamp);
                    list.forEach(hook::addEvent);

                    hooks.add(hook);
                });
    }
}
