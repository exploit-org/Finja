package org.exploit.finja.utils;

import lombok.Getter;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;

public class IntRange implements Iterable<Integer> {
    @Getter
    private final int start;

    @Getter
    private final int end;

    private final List<Integer> list = new ArrayList<>();

    public IntRange(int start, int end) {
        this.start = start;
        this.end = end;

        for (var i = start; i <= end; i++)
            list.add(i);
    }

    @NotNull
    @Override
    public Iterator<Integer> iterator() {
        return list.iterator();
    }

    @Override
    public void forEach(Consumer<? super Integer> action) {
        list.forEach(action);
    }

    @Override
    public Spliterator<Integer> spliterator() {
        return list.spliterator();
    }

    public static IntRange of(int start, int end) {
        return new IntRange(start, end);
    }
}
