package org.exploit.finja.utils;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import lombok.SneakyThrows;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public final class Jackson {
    private Jackson() {}

    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()
            .setSerializationInclusion(JsonInclude.Include.NON_NULL)
            .enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)
            .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
            .disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES)
            .disable(DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES);


    public static final ArrayNode EMPTY_ARRAY = OBJECT_MAPPER.createArrayNode();
    public static final ObjectNode EMPTY_OBJECT = OBJECT_MAPPER.createObjectNode();

    @SneakyThrows
    public static String writeAsString(Object any) {
        return OBJECT_MAPPER.writeValueAsString(any);
    }

    @SneakyThrows
    public static byte[] writeAsBytes(Object any) {
        return OBJECT_MAPPER.writeValueAsBytes(any);
    }

    @SneakyThrows
    public static <T> T readValue(String json, Class<T> clazz) {
        return OBJECT_MAPPER.readValue(json, clazz);
    }

    public static ArrayNode arrayOf(String... args) {
        var arrayNode = OBJECT_MAPPER.createArrayNode();

        for (var arg : args)
            arrayNode.add(arg);

        return arrayNode;
    }

    @SneakyThrows
    public static JsonNode readTree(String tree) {
        return OBJECT_MAPPER.readTree(tree);
    }

    @SneakyThrows
    public static <T> T convert(JsonNode node, Class<T> clazz) {
        return OBJECT_MAPPER.treeToValue(node, clazz);
    }

    @SneakyThrows
    public static <T> T convert(JsonNode node, JavaType type) {
        return OBJECT_MAPPER.treeToValue(node, type);
    }

    public static JavaType createParameterType(Class<?> clazz1, Class<?> clazz2) {
        return OBJECT_MAPPER.getTypeFactory().constructParametricType(clazz1, clazz2);
    }

    public static JavaType createParameterType(Class<?> clazz1, JavaType clazz2) {
        return OBJECT_MAPPER.getTypeFactory().constructParametricType(clazz1, clazz2);
    }

    public static JavaType createListType(Class<?> clazz) {
        return OBJECT_MAPPER.getTypeFactory().constructCollectionLikeType(ArrayList.class, clazz);
    }

    public static JsonNode toNode(Object o) {
        return OBJECT_MAPPER.valueToTree(o);
    }

    public static ObjectMapper getObjectMapper() {
        return OBJECT_MAPPER;
    }

    public static ObjectNode newObject(Map<String, Object> params) {
        var node = OBJECT_MAPPER.createObjectNode();
        params.forEach(node::putPOJO);

        return node;
    }

    public static ArrayNode newList(List<Object> values) {
        var node = OBJECT_MAPPER.createArrayNode();

        for (var value : values)
            node.add(OBJECT_MAPPER.valueToTree(value));

        return node;
    }
}
