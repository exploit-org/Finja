package org.exploit.crypto.key.ed25519;

import org.bouncycastle.util.BigIntegers;
import org.bouncycastle.util.encoders.Hex;
import org.exploit.crypto.key.ECPrivateKey;
import org.exploit.crypto.utils.SensitiveBytes;
import org.owasp.netryx.memory.SecureMemory;

import java.math.BigInteger;
import java.util.Arrays;

public class Ed25519PrivateKey implements ECPrivateKey {
    private final SecureMemory encoded;

    public Ed25519PrivateKey(SecureMemory encoded) {
        this.encoded = encoded;
    }

    @Override
    public String hex() {
        return encoded.deobfuscate(Hex::toHexString);
    }

    @Override
    public BigInteger toBigInt() {
        return encoded.deobfuscate(bytes -> new BigInteger(1, bytes));
    }

    @Override
    public SecureMemory encoded() {
        return encoded;
    }

    @Override
    public byte[] prepareHardenedData(int childIndex) {
        return encoded.deobfuscate(parentPrivateKey -> {
            var data = new byte[1 + parentPrivateKey.length + 4];
            data[0] = 0x00;
            System.arraycopy(parentPrivateKey, 0, data, 1, parentPrivateKey.length);
            data[data.length - 4] = (byte) ((childIndex >> 24) & 0xFF);
            data[data.length - 3] = (byte) ((childIndex >> 16) & 0xFF);
            data[data.length - 2] = (byte) ((childIndex >> 8) & 0xFF);
            data[data.length - 1] = (byte) (childIndex & 0xFF);
            return data;
        });
    }

    @Override
    public void erase() {
        encoded.close();
    }

    public static Ed25519PrivateKey create(byte[] key) {
        var bytes = Arrays.copyOf(key, key.length);
        return new Ed25519PrivateKey(SensitiveBytes.write(bytes));
    }

    public static Ed25519PrivateKey create(BigInteger key) {
        var bytes = BigIntegers.asUnsignedByteArray(32, key);
        return new Ed25519PrivateKey(SensitiveBytes.write(bytes));
    }

    public static Ed25519PrivateKey create(SecureMemory memory) {
        return new Ed25519PrivateKey(memory);
    }
}