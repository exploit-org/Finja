package org.exploit.crypto.key.ed25519;

import org.bouncycastle.util.encoders.Hex;
import org.exploit.crypto.key.ECPrivateKey;
import org.exploit.gmp.BigInt;
import org.exploit.sodium.ReadOnlyBuffer;

import java.util.Arrays;

public class Ed25519PrivateKey implements ECPrivateKey {
    private final ReadOnlyBuffer encoded;

    public Ed25519PrivateKey(ReadOnlyBuffer encoded) {
        this.encoded = encoded;
    }

    public Ed25519PrivateKey(byte[] key) {
        if (key.length != 32) {
            throw new IllegalArgumentException("Ed25519 private key must be 32 bytes long");
        }

        this.encoded = new ReadOnlyBuffer(key);
    }

    @Override
    public String hex() {
        var bytes = encoded.read();
        var hex = Hex.toHexString(bytes);

        Arrays.fill(bytes, (byte) 0);

        return hex;
    }

    @Override
    public BigInt toBigInt() {
        return encoded.read(bytes -> new BigInt(1, bytes));
    }

    @Override
    public ReadOnlyBuffer encoded() {
        return encoded;
    }

    @Override
    public byte[] prepareHardenedData(int childIndex) {
        return encoded.read(parentPrivateKey -> {
            var data = new byte[1 + parentPrivateKey.length + 4];
            data[0] = 0x00;
            System.arraycopy(parentPrivateKey, 0, data, 1, parentPrivateKey.length);
            data[data.length - 4] = (byte) ((childIndex >> 24) & 0xFF);
            data[data.length - 3] = (byte) ((childIndex >> 16) & 0xFF);
            data[data.length - 2] = (byte) ((childIndex >> 8) & 0xFF);
            data[data.length - 1] = (byte) (childIndex & 0xFF);
            return data;
        });
    }

    @Override
    public void erase() {
        encoded.close();
    }

    public static Ed25519PrivateKey create(byte[] key) {
        return new Ed25519PrivateKey(key);
    }

    public static Ed25519PrivateKey create(BigInt key) {
        return new Ed25519PrivateKey(key.toUnsignedByteArray(32));
    }
}