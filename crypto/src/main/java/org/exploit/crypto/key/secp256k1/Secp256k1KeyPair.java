package org.exploit.crypto.key.secp256k1;

import org.exploit.crypto.curve.Secp256k1Provider;
import org.exploit.crypto.key.ECKeyPair;
import org.exploit.crypto.key.secp256k1.tweak.TweakedKeyPair;

import java.util.Objects;

public class Secp256k1KeyPair implements ECKeyPair {
    private final Secp256k1PrivateKey privateKey;
    private final Secp256k1PublicKey publicKey;

    public Secp256k1KeyPair(Secp256k1PrivateKey privateKey, Secp256k1PublicKey publicKey) {
        this.privateKey = privateKey;
        this.publicKey = publicKey;
    }

    @Override
    public Secp256k1PrivateKey privateKey() {
        return privateKey;
    }

    @Override
    public Secp256k1PublicKey publicKey() {
        return publicKey;
    }

    public TweakedKeyPair tweak(byte[] h) {
        return new TweakedKeyPair(this.privateKey, h);
    }

    @Override
    public boolean equals(final Object other) {
        if (!(other instanceof Secp256k1KeyPair that)) {
            return false;
        }

        return Objects.equals(privateKey, that.privateKey) && publicKey.equals(that.publicKey);
    }

    @Override
    public void erase() {
        publicKey.erase();

        if (privateKey != null) {
            privateKey.erase();
        }
    }

    public static Secp256k1KeyPair create(Secp256k1PrivateKey privateKey) {
        var publicKey = (Secp256k1PublicKey) Secp256k1Provider.getInstance().getPublicKey(privateKey);

        return new Secp256k1KeyPair(privateKey, publicKey);
    }
}