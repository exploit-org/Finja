package org.exploit.crypto.key;

import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.util.BigIntegers;
import org.exploit.crypto.Base58;
import org.exploit.crypto.stereotype.Sensitive;

import java.math.BigInteger;

public interface ECPublicKey extends Sensitive {
    byte[] compress();

    byte[] encoded();

    BigInteger toBigInt();

    String hex();

    ECPoint point();

    default byte[] x() {
        var ecPoint = point().normalize();
        return BigIntegers.asUnsignedByteArray(32, ecPoint.getAffineXCoord().toBigInteger());
    }

    default String toBase58(boolean compress) {
        return Base58.getInstance().encode(compress ? compress() : encoded());
    }

    byte[] prepareNonHardenedData(int childIndex);
}