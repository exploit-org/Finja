package org.exploit.crypto;

import org.exploit.crypto.utils.Pair;

import java.util.Arrays;

public class Base58Impl {
    private final char[] alphabet;
    private final char encodedZero;
    private final int[] indexes;

    public Base58Impl(String alphabet) {
        this.alphabet = alphabet.toCharArray();
        this.encodedZero = this.alphabet[0];
        this.indexes = new int[128];
        Arrays.fill(this.indexes, -1);

        for (var i = 0; i < this.alphabet.length; i++) {
            this.indexes[this.alphabet[i]] = i;
        }
    }

    public String encode(byte[] input) {
        if (input.length == 0) {
            return "";
        }

        var zeros = 0;
        while (zeros < input.length && input[zeros] == 0) {
            ++zeros;
        }

        input = Arrays.copyOf(input, input.length);
        var encoded = new char[input.length * 2];

        var outputStart = encoded.length;

        for (var inputStart = zeros; inputStart < input.length; ) {
            encoded[--outputStart] = alphabet[divmod(input, inputStart, 256, 58)];
            if (input[inputStart] == 0) {
                ++inputStart;
            }
        }

        while (outputStart < encoded.length && encoded[outputStart] == encodedZero) {
            ++outputStart;
        }

        while (--zeros >= 0) {
            encoded[--outputStart] = encodedZero;
        }

        return new String(encoded, outputStart, encoded.length - outputStart);
    }

    public byte[] decode(String input) {
        if (input.isEmpty()) {
            return new byte[0];
        }

        var input58 = new byte[input.length()];
        for (var i = 0; i < input.length(); ++i) {
            var c = input.charAt(i);
            var digit = c < 128 ? indexes[c] : -1;
            if (digit < 0) {
                throw new IllegalArgumentException("Invalid character in Base58: " + c);
            }
            input58[i] = (byte) digit;
        }

        var zeros = 0;
        while (zeros < input58.length && input58[zeros] == 0) {
            ++zeros;
        }

        var decoded = new byte[input.length()];
        var outputStart = decoded.length;

        for (var inputStart = zeros; inputStart < input58.length; ) {
            decoded[--outputStart] = divmod(input58, inputStart, 58, 256);
            if (input58[inputStart] == 0) {
                ++inputStart;
            }
        }

        while (outputStart < decoded.length && decoded[outputStart] == 0) {
            ++outputStart;
        }

        return Arrays.copyOfRange(decoded, outputStart - zeros, decoded.length);
    }

    public Pair<Byte, byte[]> decodeCheck(String encoded) {
        var raw = decode(encoded);
        var versionAndHash = Arrays.copyOfRange(raw, 0, raw.length - 4);

        return new Pair<>(versionAndHash[0], Arrays.copyOfRange(versionAndHash, 1, versionAndHash.length));
    }

    public boolean isValid(String address) {
        try {
            var decoded = Base58.getInstance().decode(address);

            if (decoded.length < 4) {
                return false;
            }

            var payload = Arrays.copyOfRange(decoded, 0, decoded.length - 4);
            var checksum = Arrays.copyOfRange(decoded, decoded.length - 4, decoded.length);

            var hash = Hash.doubleSha256(payload);

            return Arrays.equals(Arrays.copyOfRange(hash, 0, 4), checksum);
        } catch (Exception e) {
            return false;
        }
    }

    private static byte divmod(byte[] number, int firstDigit, int base, int divisor) {
        var remainder = 0;

        for (var i = firstDigit; i < number.length; i++) {
            var digit = number[i] & 0xFF;
            var temp = remainder * base + digit;

            number[i] = (byte) (temp / divisor);
            remainder = temp % divisor;
        }

        return (byte) remainder;
    }
}
