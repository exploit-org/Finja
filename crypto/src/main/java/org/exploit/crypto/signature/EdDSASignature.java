package org.exploit.crypto.signature;

import java.util.Arrays;

public class EdDSASignature implements Signature {
    private final byte[] r;
    private final byte[] s;
    public static final int BYTES_REQUIRED = 64;

    public EdDSASignature(byte[] r, byte[] s) {
        if (r.length != 32 || s.length != 32) {
            throw new IllegalArgumentException("Invalid R or S length");
        }
        this.r = Arrays.copyOf(r, r.length);
        this.s = Arrays.copyOf(s, s.length);
    }

    @Override
    public byte[] encode() {
        var bytes = new byte[BYTES_REQUIRED];
        System.arraycopy(r, 0, bytes, 0, r.length);
        System.arraycopy(s, 0, bytes, 32, s.length);
        return bytes;
    }

    @Override
    public byte[] der() {
        throw new UnsupportedOperationException("DER encoding not supported for Ed25519");
    }

    @Override
    public boolean equals(final Object other) {
        if (!(other instanceof EdDSASignature that)) {
            return false;
        }

        return Arrays.equals(this.r, that.r) && Arrays.equals(this.s, that.s);
    }

    public static EdDSASignature create(byte[] r, byte[] s) {
        return new EdDSASignature(r, s);
    }

    public static EdDSASignature decode(byte[] bytes) {
        if (bytes.length != BYTES_REQUIRED)
            throw new IllegalArgumentException("Invalid bytes length");

        var r = Arrays.copyOfRange(bytes, 0, 32);
        var s = Arrays.copyOfRange(bytes, 32, 64);

        return EdDSASignature.create(r, s);
    }
}