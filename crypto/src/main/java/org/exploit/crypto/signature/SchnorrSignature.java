package org.exploit.crypto.signature;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.Arrays;

@Getter
@RequiredArgsConstructor
public class SchnorrSignature implements Signature {
    public static final int BYTES_REQUIRED = 64;
    private final byte[] r;
    private final byte[] s;

    @Override
    public byte[] encode() {
        try (var out = new ByteArrayOutputStream()) {
            out.write(r);
            out.write(s);

            return out.toByteArray();
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    @Override
    public byte[] der() {
        throw new UnsupportedOperationException("DER encoding not supported for Schnorr");
    }

    public static SchnorrSignature decode(byte[] bytes) {
        if (bytes.length != BYTES_REQUIRED)
            throw new IllegalArgumentException("Invalid signature length");

        var r = Arrays.copyOfRange(bytes, 0, 32);
        var s = Arrays.copyOfRange(bytes, 32, 64);

        return new SchnorrSignature(r, s);
    }
}