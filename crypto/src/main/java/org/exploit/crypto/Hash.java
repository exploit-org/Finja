package org.exploit.crypto;

import at.favre.lib.bytes.Bytes;
import org.bouncycastle.jcajce.provider.digest.*;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UncheckedIOException;

public final class Hash {
    private Hash() {
    }

    public static byte[] sha256(byte[] data) {
        var digest = new SHA256.Digest();

        return digest.digest(data);
    }

    public static byte[] sha512(byte[] data) {
        var digest = new SHA512.Digest();

        return digest.digest(data);
    }

    public static byte[] doubleSha256(byte[] data) {
        return sha256(sha256(data));
    }

    public static byte[] ripeMd160(byte[] data) {
        var digest = new RIPEMD160.Digest();
        return digest.digest(data);
    }

    public static byte[] hash160(byte[] data) {
        return ripeMd160(sha256(data));
    }

    public static byte[] checksum(byte[] data) {
        return Bytes.wrap(doubleSha256(data)).copy(0, 4)
                .array();
    }

    public static byte[] sha3(byte[] data) {
        var digest = new SHA3.Digest256();
        digest.update(data, 0, data.length);

        return digest.digest();
    }

    public static byte[] keccak256(byte[] data) {
        var digest = new Keccak.Digest256();
        digest.update(data);

        return digest.digest();
    }

    public static byte[] hmacSha512(byte[] key, byte[] data) {
        try {
            var hmacSha512 = Mac.getInstance("HmacSHA512");
            var secretKey = new SecretKeySpec(key, "HmacSHA512");
            hmacSha512.init(secretKey);

            return hmacSha512.doFinal(data);
        } catch (Exception e) {
            throw new IllegalStateException("Failed to calculate hmac-sha512", e);
        }
    }

    public static byte[] taggedHash(byte[] input, String tag) {
        var hashedTag = sha256(tag.getBytes());

        try (var out = new ByteArrayOutputStream()) {
            out.write(hashedTag);
            out.write(hashedTag);
            out.write(input);

            return sha256(out.toByteArray());
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

}