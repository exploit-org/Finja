package org.exploit.bch.util;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.Arrays;

public class CashAddr {
    private static final String CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";

    private CashAddr() {}

    public static String encode(byte[] data) {
        var sb = new StringBuilder();
        for (var b : data) {
            sb.append(CHARSET.charAt(b));
        }
        return sb.toString();
    }

    public static byte[] decode(String base32) {
        var charsetIndexes = new int[128];
        Arrays.fill(charsetIndexes, -1);

        for (var i = 0; i < CHARSET.length(); i++) {
            charsetIndexes[CHARSET.charAt(i)] = i;
        }

        try (var stream = new ByteArrayOutputStream()) {
            var accumulator = 0;
            var bits = 0;

            for (var c : base32.toCharArray()) {
                var value = charsetIndexes[c];
                if (value == -1)
                    throw new IllegalArgumentException("Bad character in input " + c);

                accumulator = (accumulator << 5) | value;
                bits += 5;
                if (bits >= 8) {
                    stream.write((accumulator >> (bits - 8)) & 0xFF);
                    bits -= 8;
                }
            }

            if (bits > 0) {
                stream.write((accumulator << (8 - bits)) & 0xFF);
            }

            return stream.toByteArray();
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    public static byte[] extractHash(String address) {
        var split = address.split(":");
        var finalAddress = split.length == 2 ? split[1] : address;
        var prefix = split.length == 2 ? split[0] : "";

        var decoded = CashAddr.decode(finalAddress);

        var version = (byte) (decoded[0] & 0xFF);
        if (version != 0x00)
            throw new IllegalArgumentException("Not P2PKH " + address);

        return Arrays.copyOfRange(decoded, 1, decoded.length - 8);
    }

    public static String splitAddress(String address) {
        var split = address.split(":");
        return split.length == 2 ? split[1] : address;
    }
}