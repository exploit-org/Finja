package org.exploit.tron;

import lombok.Getter;
import org.exploit.crypto.constant.SupportedCurve;
import org.exploit.finja.core.*;
import org.exploit.finja.core.constant.Asset;
import org.exploit.finja.core.contract.SolidityContract;
import org.exploit.finja.core.key.ECKeyManager;
import org.exploit.finja.core.key.Secp256k1KeyManager;
import org.exploit.finja.core.model.WebData;
import org.exploit.finja.listener.ListenerProvider;
import org.exploit.secp256k1.Secp256k1PointOps;
import org.exploit.signalix.manager.EventScope;
import org.exploit.sodium.ReadOnlyBuffer;
import org.exploit.tron.address.TronWallet;
import org.exploit.tron.api.rest.TronClient;
import org.exploit.tron.converter.TronConverter;
import org.exploit.tron.generator.TronAddressGenerator;
import org.exploit.tron.service.BalanceService;
import org.exploit.tron.utils.TronKeys;
import org.exploit.tron.validator.TronAddressValidator;

import java.util.ArrayList;
import java.util.List;

public class TronProvider implements CoinProvider<Secp256k1PointOps> {
    private final TronClient tronClient;
    private final ListenerProvider<TronProvider> listenerProvider;
    private final EventClient<TronProvider> eventClient;

    @Getter
    private final List<SolidityContract> contractRegistry = new ArrayList<>();

    private TronProvider(
            WebData tronNode, ListenerProvider<TronProvider> listenerProvider,
            EventClient<TronProvider> eventClient, List<SolidityContract> contracts
    ) {
        this.tronClient = new TronClient(tronNode);
        this.listenerProvider = listenerProvider;
        this.eventClient = eventClient;

        contractRegistry.addAll(contracts);
    }

    @Override
    public Asset asset() {
        return Asset.TRX;
    }

    @Override
    public TronWallet createWallet(String publicAddress, ECKeyManager<Secp256k1PointOps> keyManager) {
        return new TronWallet(this, publicAddress, keyManager);
    }

    @Override
    public TronWallet createWallet(ECKeyManager<Secp256k1PointOps> keyManager) {
        var publicAddress = TronKeys.getAddress(keyManager.getPublicKey());
        return createWallet(publicAddress, keyManager);
    }

    @Override
    public TronWallet createWallet(ReadOnlyBuffer privateKey) {
        return createWallet(new Secp256k1KeyManager(privateKey));
    }

    @Override
    public TronWallet createWallet(String publicAddress, ReadOnlyBuffer privateKey) {
        return createWallet(publicAddress, new Secp256k1KeyManager(privateKey));
    }

    @Override
    public TransactionListener listener(EventScope eventScope) {
        return listenerProvider.createListener(this, eventScope);
    }

    @Override
    public AddressGenerator<Secp256k1PointOps> generator() {
        return new TronAddressGenerator();
    }

    @Override
    public SmartValueConverter converter() {
        return new TronConverter(tronClient);
    }

    @Override
    public SmartCoinBalanceService balanceService() {
        return new BalanceService(this);
    }

    @Override
    public EventFetcher eventFetcher() {
        return eventClient.createEventFetcher(this);
    }

    @Override
    public AddressValidator validator() {
        return new TronAddressValidator();
    }

    @Override
    public SupportedCurve curve() {
        return SupportedCurve.SECP256K1;
    }

    public TronClient client() {
        return tronClient;
    }

    public void registerContract(SolidityContract contract) {
        contractRegistry.add(contract);
    }

    public <T extends SolidityContract> T findContract(Class<T> clazz) {
        return contractRegistry.stream()
                .filter(clazz::isInstance)
                .map(clazz::cast)
                .findFirst()
                .orElse(null);
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public static class Builder {
        private WebData node;
        private ListenerProvider<TronProvider> listenerProvider;
        private EventClient<TronProvider> eventClient;
        private final List<SolidityContract> contracts = new ArrayList<>();

        public Builder node(WebData node) {
            this.node = node;
            return this;
        }

        public Builder registerContract(SolidityContract contract) {
            this.contracts.add(contract);
            return this;
        }

        public Builder registerContracts(List<SolidityContract> contracts) {
            this.contracts.addAll(contracts);
            return this;
        }

        public Builder listenerProvider(ListenerProvider<TronProvider> listenerProvider) {
            this.listenerProvider = listenerProvider;
            return this;
        }

        public Builder eventClient(EventClient<TronProvider> eventClient) {
            this.eventClient = eventClient;
            return this;
        }

        public TronProvider build() {
            return new TronProvider(node, listenerProvider, eventClient, contracts);
        }
    }
}
