package org.exploit.tron.address;

import org.exploit.finja.core.OutgoingTransaction;
import org.exploit.finja.core.SmartContractWallet;
import org.exploit.finja.core.contract.SolidityContract;
import org.exploit.finja.core.contract.transaction.ContractCall;
import org.exploit.finja.core.key.ECKeyManager;
import org.exploit.finja.core.model.Amount;
import org.exploit.finja.core.model.Recipient;
import org.exploit.finja.core.model.Value;
import org.exploit.tron.TronProvider;
import org.exploit.tron.service.TronTransactionService;
import org.web3j.abi.datatypes.Type;

import java.util.List;
import java.util.Optional;

public class TronWallet implements SmartContractWallet {
    private final String publicAddress;

    private final TronProvider provider;
    private final TronTransactionService transactionService;

    public TronWallet(TronProvider provider, String publicAddress, ECKeyManager keyManager) {
        this.publicAddress = publicAddress;

        this.provider = provider;
        this.transactionService = new TronTransactionService(provider, keyManager);
    }

    @Override
    public String publicAddress() {
        return publicAddress;
    }

    @Override
    public OutgoingTransaction transaction(String to, Amount amount, int flags) {
        return transactionService.sendTransaction(publicAddress, to, amount, flags);
    }

    @Override
    public OutgoingTransaction transaction(List<Recipient> recipients, int flags) {
        return transactionService.multiSend(this, recipients, flags);
    }

    @Override
    public OutgoingTransaction transaction(String to, String contractAddress, Amount amount) {
        return transactionService.sendTransaction(publicAddress, to, contractAddress, amount);
    }

    @Override
    public OutgoingTransaction transaction(String contractAddress, List<Recipient> recipients) {
        return transactionService.multiSend(this, contractAddress, recipients);
    }

    @Override
    public OutgoingTransaction execute(Class<SolidityContract> contract, String functionName, List<Type> args) {
        return Optional.ofNullable(provider.findContract(contract))
                .map(c -> c.execute(this, functionName, args))
                .orElseThrow(() -> new IllegalArgumentException("Contract not found: " + contract.getName()));
    }

    @Override
    public ContractCall call(Class<SolidityContract> contract, String functionName, List<Type> args) {
        return Optional.ofNullable(provider.findContract(contract))
                .map(c -> c.call(this, functionName, args))
                .orElseThrow(() -> new IllegalArgumentException("Contract not found: " + contract.getName()));
    }

    @Override
    public TronTransactionService transactions() {
        return transactionService;
    }

    @Override
    public Value balance() {
        return provider.balanceService().balance(publicAddress);
    }

    @Override
    public Value balance(String contractAddress) {
        return provider.balanceService().balance(publicAddress, contractAddress);
    }

    @Override
    public void erase() {
        transactionService.erase();
    }

}