package org.exploit.tron.api.rest;

import com.fasterxml.jackson.databind.JsonNode;
import org.exploit.finja.core.model.WebData;
import org.exploit.finja.exception.TransactionNotFoundException;
import org.exploit.finja.utils.Jackson;
import org.exploit.tron.protocol.*;
import org.exploit.tron.protocol.transaction.Transaction;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.generated.Uint8;

import java.math.BigInteger;
import java.util.Collections;

public class TronClient {
    private final TronNodeApi api;

    public TronClient(WebData webData) {
        this.api = TronNodeApi.create(webData);
    }

    public Transaction createTransaction(TransferContract transferContract) {
        return api.createTransaction(transferContract);
    }

    public BroadcastResult broadcast(Transaction transaction) {
        return api.broadcast(transaction);
    }

    public Long getFreeNet(String address, boolean visible) {
        var resources = api.getAccountResource(new AccountModel(address, visible));
        return resources.get("freeNetLimit").asLong(0L);
    }

    public JsonNode getAccount(AccountModel address) {
        return api.getAccount(address);
    }

    public ChainParameters getChainParameters() {
        return api.getChainParameters();
    }

    public Long getSystemAccountActivationFee() {
        var parameters = getChainParameters();

        var systemActivateFee = parameters.findParameter("getCreateNewAccountFeeInSystemContract")
                .map(p -> p.getValue().asLong(0L))
                .orElse(0L);

        var accountCreateFee = parameters.findParameter("getCreateAccountFee")
                .map(p -> p.getValue().asLong(0L))
                .orElse(0L);

        return systemActivateFee + accountCreateFee;
    }

    public Boolean isActivated(AccountModel address) {
        var account = getAccount(address);
        return account.isEmpty();
    }

    public TransactionResponse triggerSmartContract(TriggerSmartContract contract) {
        return api.triggerSmartContract(contract);
    }

    public JsonNode triggerConstantContract(TriggerSmartContract contract) {
        return api.triggerConstantContract(contract);
    }

    public Block getNowBlock() {
        return api.getNowBlock();
    }

    public Block getLastConfirmedBlock() {
        return api.getNowBlockSolidity();
    }

    public Block getBlockById(String id) {
        return api.getBlockById(new Value(id));
    }

    public Block getBlockByNum(long num) {
        return api.getBlockByNum(new Num(num));
    }

    public TransactionInfo getTransactionInfoById(String id) {
        var node = api.getTransactionInfoById(new Value(id));

        if (node.isEmpty())
            throw new TransactionNotFoundException(id);

        return Jackson.convert(node, TransactionInfo.class);
    }

    public Transaction getTransactionById(String id) {
        var node = api.getTransactionById(new Value(id));
        if (node.isEmpty()) {
            throw new TransactionNotFoundException(id);
        }
        return Jackson.convert(node, Transaction.class);
    }

    public BigInteger energyUsage(TriggerSmartContract smartContract) {
        var node = triggerConstantContract(smartContract);
        return BigInteger.valueOf(node.get("energy_used").asLong());
    }

    public BigInteger estimateSunConsumption(TriggerSmartContract smartContract) {
        var energyUsed = energyUsage(smartContract);
        var price = energyPrice();
        return energyUsed.multiply(price);
    }

    public BigInteger decimals(String contractAddress) {
        var function = new Function(
                "decimals",
                Collections.emptyList(),
                Collections.singletonList(new TypeReference<Uint8>() {})
        );

        var input = FunctionEncoder.encode(function);

        var trigger = new TriggerSmartContract();
        trigger.setOwnerAddress(contractAddress);
        trigger.setFunctionSelector("decimals()");
        trigger.setContractAddress(contractAddress);
        trigger.setData(input);

        var node = api.triggerConstantContract(trigger);
        return new BigInteger(node.get("constant_result").get(0).asText(), 16);
    }

    public BigInteger energyPrice() {
        var node = api.getEnergyPrice();
        var history = node.get("prices").asText();

        var split = history.split(",");
        var last = split[split.length - 1].split(":");

        return BigInteger.valueOf(Long.parseLong(last[1]));
    }
}