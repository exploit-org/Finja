package org.exploit.tron.api.rest;

import com.fasterxml.jackson.databind.JsonNode;
import org.eclipse.jetty.http.HttpMethod;
import org.exploit.finja.core.model.WebData;
import org.exploit.jettyx.annotation.Body;
import org.exploit.jettyx.annotation.ContentType;
import org.exploit.jettyx.annotation.HttpRequest;
import org.exploit.jettyx.model.HttpResponse;
import org.exploit.tron.protocol.*;
import org.exploit.tron.protocol.transaction.Transaction;

public interface TronNodeApi {
    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.CREATE_TRANSACTION)
    HttpResponse<Transaction> createTransaction(@Body TransferContract body);

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.BROADCAST_TRANSACTION)
    HttpResponse<BroadcastResult> broadcast(@Body Transaction body);

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.TRIGGER_SMART_CONTRACT)
    HttpResponse<JsonNode> triggerSmartContract(@Body TriggerSmartContract body);

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.TRIGGER_CONSTANT_CONTRACT)
    HttpResponse<JsonNode> triggerConstantContract(@Body TriggerSmartContract body);

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.GET_NOW_BLOCK)
    HttpResponse<Block> getNowBlock();

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.GET_NOW_BLOCK_SOLIDITY)
    HttpResponse<Block> getNowBlockSolidity();

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.GET_BLOCK_BY_ID)
    HttpResponse<Block> getBlockById(@Body Value id);

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.GET_BLOCK_BY_NUM)
    HttpResponse<Block> getBlockByNum(@Body Num num);

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.GET_TRANSACTION_INFO)
    HttpResponse<JsonNode> getTransactionInfoById(@Body Value value);

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.GET_TRANSACTION)
    HttpResponse<JsonNode> getTransactionById(@Body Value value);

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = Endpoint.GET_ACCOUNT)
    HttpResponse<JsonNode> getAccount(@Body AccountModel address);

    @HttpRequest(method = HttpMethod.GET, path = Endpoint.GET_CHAIN_PARAMETERS)
    HttpResponse<ChainParameters> getChainParameters();

    @ContentType("application/json")
    @HttpRequest(path = Endpoint.ENERGY_PRICE, method = HttpMethod.GET)
    HttpResponse<JsonNode> getEnergyPrice();

    @ContentType("application/json")
    @HttpRequest(path = Endpoint.GET_ACCOUNT_RESOURCE, method = HttpMethod.POST)
    HttpResponse<JsonNode> getAccountResource(@Body AccountModel address);
    class Endpoint {
        private Endpoint() {
        }

        static final String GET_CHAIN_PARAMETERS = "/wallet/getchainparameters";
        static final String CREATE_TRANSACTION = "/wallet/createtransaction";
        static final String BROADCAST_TRANSACTION = "/wallet/broadcasttransaction";
        static final String TRIGGER_SMART_CONTRACT = "/wallet/triggersmartcontract";
        static final String TRIGGER_CONSTANT_CONTRACT = "/wallet/triggerconstantcontract";
        static final String GET_TRANSACTION_INFO = "/wallet/gettransactioninfobyid";
        static final String GET_TRANSACTION = "/wallet/gettransactionbyid";
        static final String GET_NOW_BLOCK = "/wallet/getnowblock";
        static final String GET_NOW_BLOCK_SOLIDITY = "/walletsolidity/getnowblock";
        static final String GET_BLOCK_BY_ID = "/wallet/getblockbyid";
        static final String GET_BLOCK_BY_NUM = "/wallet/getblockbynum";
        static final String GET_ACCOUNT = "/wallet/getaccount";
        static final String ENERGY_PRICE = "/wallet/getenergyprices";
        static final String GET_ACCOUNT_RESOURCE = "/wallet/getaccountresource";
    }

    static TronNodeApi create(WebData webData) {
        return webData.newApiClient(TronNodeApi.class);
    }
}