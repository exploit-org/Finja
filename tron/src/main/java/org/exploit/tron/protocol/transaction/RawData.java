package org.exploit.tron.protocol.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.protobuf.ByteString;
import com.google.protobuf.GeneratedMessageV3;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.bouncycastle.util.encoders.Hex;
import org.exploit.crypto.Hash;
import org.exploit.tron.proto.Tron;
import org.exploit.tron.protocol.builder.RawDataBuilder;

import java.util.List;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class RawData implements ProtoValue {
    private List<Contract> contract;
    @JsonProperty("ref_block_bytes")
    private String refBlockBytes;
    @JsonProperty("ref_block_hash")
    private String refBlockHash;
    private long expiration;
    @JsonProperty("fee_limit")
    private long feeLimit;
    private long timestamp;

    public static RawDataBuilder newBuilder() {
        return new RawDataBuilder();
    }

    @Override
    public GeneratedMessageV3 toMessage() {
        var contracts = contract.stream()
                .map(c -> (Tron.Contract) c.toMessage())
                .toList();

        return Tron.Raw.newBuilder()
                .setTimestamp(timestamp)
                .setExpiration(expiration)
                .setRefBlockBytes(ByteString.fromHex(refBlockBytes))
                .setRefBlockHash(ByteString.fromHex(refBlockHash))
                .addAllContract(contracts)
                .build();
    }

    public byte[] bytes() {
        return toMessage().toByteArray();
    }

    public String hex() {
        return Hex.toHexString(bytes());
    }

    public String txid() {
        return Hex.toHexString(Hash.sha256(bytes()));
    }
}