package org.exploit.tron.protocol.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.google.protobuf.GeneratedMessageV3;
import org.exploit.finja.utils.Jackson;
import org.exploit.tron.constant.Constant;
import org.exploit.tron.proto.Tron;

public record Parameter(JsonNode value, @JsonProperty("type_url") String typeUrl) implements ProtoValue {
    public Parameter() {
        this(Jackson.getObjectMapper().createObjectNode(), "");
    }

    public <T> T value(Class<T> clazz) {
        return Jackson.convert(value, clazz);
    }

    @Override
    public GeneratedMessageV3 toMessage() {
        var parameter = Tron.Any.newBuilder()
                .setTypeUrl(typeUrl);

        GeneratedMessageV3 valueProto;

        if (typeUrl.equals(Constant.TRANSFER_TYPE_URL))
            valueProto = Jackson.convert(value, TransferContractValue.class).toMessage();
        else if (typeUrl.equals(Constant.TRIGGER_SMART_CONTRACT_TYPE_URL))
            valueProto = Jackson.convert(value, TriggerSmartContractValue.class).toMessage();
        else
            throw new IllegalArgumentException("Unsupported typeUrl: " + typeUrl);

        return parameter.setValue(valueProto.toByteString())
                .build();
    }
}