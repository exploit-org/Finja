package org.exploit.tron.protocol;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.bouncycastle.util.encoders.Hex;
import org.exploit.tron.protocol.transaction.Transaction;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@JsonIgnoreProperties(ignoreUnknown = true)
public record Block(
    String blockID,

    @JsonProperty("block_header")
    BlockHeader blockHeader,

    List<Transaction> transactions
) {
    public Block() {
        this("", new BlockHeader(), new ArrayList<>());
    }

    public record BlockHeader(
        @JsonProperty("raw_data")
        RawBlockHeaderData rawData,

        @JsonProperty("witness_signature")
        String witnessSignature
    ) {

        public BlockHeader() {
            this(new RawBlockHeaderData(), "");
        }
    }

    public record RawBlockHeaderData(
            long number,
            String txTrieRoot,

            @JsonProperty("witness_address")
            String witnessAddress,

            String parentHash,

            int version,
            long timestamp
    ) {
        public RawBlockHeaderData() {
            this(0, "", "", "", 0, 0);
        }
    }

    public byte[] calcRefBlockHash() {
        return Arrays.copyOfRange(Hex.decode(blockID), 8, 16);
    }

    public byte[] calcRefBlockBytes() {
        var buffer = ByteBuffer.allocate(Long.BYTES);
        buffer.putLong(blockHeader.rawData.number);
        buffer.position(Long.BYTES - 2);

        var bytes = new byte[2];
        buffer.get(bytes);

        return bytes;
    }
}