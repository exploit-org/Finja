package org.exploit.evm.service;

import org.exploit.finja.core.SmartCoinBalanceService;
import org.exploit.finja.core.model.Value;
import org.exploit.evm.EvmProvider;
import org.exploit.evm.constant.BlockParameter;
import org.exploit.evm.protocol.Transaction;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.utils.Numeric;

import java.util.List;

public class BalanceService implements SmartCoinBalanceService {
    private final EvmProvider provider;

    public BalanceService(EvmProvider provider) {
        this.provider = provider;
    }

    @Override
    public Value balance(String address) {
        var unit = provider.client().getBalance(address, BlockParameter.LATEST);
        var human = provider.converter().toHuman(unit);

        return new Value(human, unit);
    }

    @Override
    public Value balance(String address, String contractAddress) {
        var function = new Function(
                "balanceOf",
                List.of(new Address(address)),
                List.of(new TypeReference<Uint256>() {})
        );

        var encoded = FunctionEncoder.encode(function);

        var call = Transaction.newBuilder()
                .from(address)
                .to(contractAddress)
                .input(encoded)
                .build()
                .toCall();

        var node = provider.client().ethCall(call, BlockParameter.LATEST);
        var unit = Numeric.toBigInt(node.get("result").asText());
        var human = provider.converter().toHuman(unit, contractAddress);

        return new Value(human, unit);
    }
}
