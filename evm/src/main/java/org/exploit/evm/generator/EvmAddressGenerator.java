package org.exploit.evm.generator;

import org.exploit.crypto.curve.Secp256k1Provider;
import org.exploit.crypto.key.ECKeyPair;
import org.exploit.evm.utils.EthKeys;
import org.exploit.finja.core.AddressGenerator;
import org.exploit.finja.core.constant.Asset;
import org.exploit.finja.core.model.CommonAddress;
import org.exploit.secp256k1.Secp256k1PointOps;
import org.exploit.sodium.ReadOnlyBuffer;

public class EvmAddressGenerator implements AddressGenerator<Secp256k1PointOps> {
    @Override
    public CommonAddress generate() {
        var keyPair = Secp256k1Provider.getInstance().generateKeyPair();
        var address = generate(keyPair);

        keyPair.erase();

        return address;
    }

    @Override
    public CommonAddress generate(ECKeyPair<Secp256k1PointOps> keyPair) {
        var publicAddress = "0x" + EthKeys.getAddress(keyPair.publicKey());
        var ecPriv = keyPair.privateKey();

        var privateKey = (ecPriv != null) ? keyPair.privateKey().toBigInt().toUnsignedByteArray(32)
                : new byte[0];

        return new CommonAddress(publicAddress, new ReadOnlyBuffer(privateKey));
    }

    @Override
    public Asset asset() {
        return Asset.EVM;
    }
}
