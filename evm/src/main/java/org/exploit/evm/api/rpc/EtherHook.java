package org.exploit.evm.api.rpc;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.NullNode;
import io.netty.handler.codec.http.HttpHeaderNames;
import io.netty.handler.codec.http.HttpHeaders;
import org.exploit.evm.utils.MonoFunction;
import org.exploit.finja.core.model.WebData;
import org.exploit.finja.core.ws.WebSocketHook;
import org.exploit.finja.utils.Jackson;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Mono;
import reactor.netty.http.websocket.WebsocketInbound;
import reactor.netty.http.websocket.WebsocketOutbound;

import java.util.List;

import static io.netty.handler.codec.http.HttpHeaderValues.APPLICATION_JSON;

public class EtherHook extends WebSocketHook {
    private final EvmClient client;
    private final List<Object> params;
    private final MonoFunction<JsonNode, Void> handler;

    protected EtherHook(WebData data, EvmClient client, List<Object> params, MonoFunction<JsonNode, Void> handler) {
        super(data);
        this.client = client;
        this.params = params;
        this.handler = handler;
    }

    @Override
    public Mono<Void> handle(String text) {
        var jsonNode = Jackson.readTree(text);

        var method = jsonNode.get("method");

        if (method == null || method instanceof NullNode)
            return Mono.empty();

        var sub = method.asText().equals("eth_subscription");

        if (!sub)
            return Mono.empty();

        return handler.apply(jsonNode);
    }

    @Override
    public void modifyHeaders(HttpHeaders headers) {
        headers.add(HttpHeaderNames.CONTENT_TYPE, APPLICATION_JSON);
    }

    @Override
    public Publisher<Void> doOnConnected(WebsocketInbound inbound, WebsocketOutbound outbound) {
        return client.sendSubscriptionRequest(outbound, params);
    }

    @Override
    public Publisher<Void> ping(WebsocketOutbound outbound) {
        return Mono.empty();
    }

    @Override
    public long pingRoundSeconds() {
        return 30L;
    }
}
