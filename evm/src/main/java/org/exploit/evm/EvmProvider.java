package org.exploit.evm;

import lombok.Getter;
import org.exploit.crypto.constant.SupportedCurve;
import org.exploit.evm.address.EvmWallet;
import org.exploit.evm.api.rpc.EvmClient;
import org.exploit.evm.converter.EthConverter;
import org.exploit.evm.generator.EvmAddressGenerator;
import org.exploit.evm.service.BalanceService;
import org.exploit.evm.utils.EthKeys;
import org.exploit.evm.validator.EvmAddressValidator;
import org.exploit.finja.core.*;
import org.exploit.finja.core.constant.Asset;
import org.exploit.finja.core.contract.SolidityContract;
import org.exploit.finja.core.key.ECKeyManager;
import org.exploit.finja.core.key.Secp256k1KeyManager;
import org.exploit.finja.core.model.WebData;
import org.exploit.finja.listener.ListenerProvider;
import org.exploit.secp256k1.Secp256k1PointOps;
import org.exploit.signalix.manager.EventScope;
import org.exploit.sodium.ReadOnlyBuffer;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

public class EvmProvider implements CoinProvider<Secp256k1PointOps> {
    private final EvmClient evmClient;
    private final EthConverter converter;
    private final ListenerProvider<EvmProvider> listenerProvider;
    private final EventClient<EvmProvider> eventClient;

    @Getter
    private final BigInteger chainId;

    @Getter
    private final List<SolidityContract> contractRegistry = new ArrayList<>();

    private EvmProvider(
            WebData webData,
            ListenerProvider<EvmProvider> listenerProvider,
            EventClient<EvmProvider> eventClient,
            BigInteger chainId,
            List<SolidityContract> contracts
    ) {
        this.evmClient = new EvmClient(webData);
        this.listenerProvider = listenerProvider;
        this.eventClient = eventClient;
        this.chainId = chainId;

        this.converter = new EthConverter(evmClient);
        this.contractRegistry.addAll(contracts);
    }

    @Override
    public Asset asset() {
        return Asset.EVM;
    }

    @Override
    public EvmWallet createWallet(String publicAddress, ECKeyManager<Secp256k1PointOps> keyManager) {
        return new EvmWallet(this, publicAddress, keyManager);
    }

    @Override
    public EvmWallet createWallet(ECKeyManager<Secp256k1PointOps> keyManager) {
        return createWallet("0x" + EthKeys.getAddress(keyManager.getPublicKey()), keyManager);
    }

    @Override
    public TransactionListener listener(EventScope eventScope) {
        return listenerProvider.createListener(this, eventScope);
    }

    @Override
    public AddressGenerator<Secp256k1PointOps> generator() {
        return new EvmAddressGenerator();
    }

    @Override
    public EthConverter converter() {
        return converter;
    }

    @Override
    public AddressValidator validator() {
        return new EvmAddressValidator();
    }

    @Override
    public SmartCoinBalanceService balanceService() {
        return new BalanceService(this);
    }

    public SolidityContract findContract(Class<?> clazz) {
        return contractRegistry.stream()
                .filter(clazz::isInstance)
                .findFirst()
                .orElse(null);
    }

    public void registerContract(SolidityContract contract) {
        contractRegistry.add(contract);
    }

    @Override
    public EventFetcher eventFetcher() {
        return eventClient.createEventFetcher(this);
    }

    public EvmClient client() {
        return evmClient;
    }

    @Override
    public SupportedCurve curve() {
        return SupportedCurve.SECP256K1;
    }

    @Override
    public EvmWallet createWallet(ReadOnlyBuffer privateKey) {
        return (EvmWallet) createWallet(new Secp256k1KeyManager(privateKey));
    }

    @Override
    public EvmWallet createWallet(String publicAddress, ReadOnlyBuffer privateKey) {
        return (EvmWallet) createWallet(publicAddress, new Secp256k1KeyManager(privateKey));
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public static class Builder {
        private WebData webData;
        private ListenerProvider<EvmProvider> listenerProvider;
        private EventClient<EvmProvider> eventClient;
        private BigInteger chainId;
        private final List<SolidityContract> contracts = new ArrayList<>();

        public Builder node(WebData webData) {
            this.webData = webData;
            return this;
        }

        public Builder listenerProvider(ListenerProvider<EvmProvider> listenerProvider) {
            this.listenerProvider = listenerProvider;
            return this;
        }

        public Builder eventClient(EventClient<EvmProvider> eventClient) {
            this.eventClient = eventClient;
            return this;
        }

        public Builder chainId(BigInteger chainId) {
            this.chainId = chainId;
            return this;
        }

        public Builder registerContract(SolidityContract contract) {
            this.contracts.add(contract);
            return this;
        }

        public Builder registerContracts(List<SolidityContract> contracts) {
            this.contracts.addAll(contracts);
            return this;
        }

        public EvmProvider build() {
            if (webData == null) throw new IllegalStateException("Node data should be specified");
            if (chainId == null) throw new IllegalStateException("ChainId should be specified");

            return new EvmProvider(webData, listenerProvider, eventClient, chainId, contracts);
        }
    }
}