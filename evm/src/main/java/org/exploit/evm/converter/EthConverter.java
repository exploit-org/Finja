package org.exploit.evm.converter;

import org.exploit.finja.core.SmartValueConverter;
import org.exploit.finja.core.converter.MathConstantConverter;
import org.exploit.evm.api.rpc.EvmClient;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;

public class EthConverter extends MathConstantConverter implements SmartValueConverter {
    private final EvmClient ethereumClient;

    public EthConverter(EvmClient ethereumClient) {
        super(18);
        this.ethereumClient = ethereumClient;
    }

    @Override
    public BigInteger toUnit(BigDecimal amount, String contractAddress) {
        var decimals = ethereumClient.tokenDecimals(contractAddress);

        var pow = BigDecimal.TEN.pow(decimals.intValue());

        return amount.multiply(pow)
                .setScale(0, RoundingMode.HALF_EVEN)
                .toBigInteger();
    }

    @Override
    public BigDecimal toHuman(BigInteger amount, String contractAddress) {
        var decimals = ethereumClient.tokenDecimals(contractAddress);

        var pow = BigDecimal.TEN.pow(decimals.intValue());

        return BigDecimal.valueOf(amount.longValue())
                .divide(pow, decimals.intValue(), RoundingMode.HALF_EVEN)
                .setScale(decimals.intValue(), RoundingMode.HALF_EVEN);
    }
}
