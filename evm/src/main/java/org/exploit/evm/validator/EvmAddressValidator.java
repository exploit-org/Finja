package org.exploit.evm.validator;

import org.bouncycastle.util.encoders.Hex;
import org.exploit.crypto.Hash;
import org.exploit.finja.core.AddressValidator;

import java.nio.charset.StandardCharsets;
import java.util.Locale;
import java.util.regex.Pattern;

public class EvmAddressValidator implements AddressValidator {
    private static final Pattern REGEX = Pattern.compile("0x[a-fA-F0-9]{40}");

    @Override
    public boolean isValidAddress(String address) {
         if (!REGEX.matcher(address).matches())
             return false;

        if (!address.equals(address.toLowerCase()) && !address.equals(address.toUpperCase()))
            return address.equals(toChecksumAddress(address));

        return true;
    }

    private static String toChecksumAddress(String address) {
        var addressNoPrefix = address.substring(2).toLowerCase(Locale.ROOT);
        var hash = Hex.toHexString(Hash.keccak256(addressNoPrefix.getBytes(StandardCharsets.UTF_8)));

        var result = new StringBuilder("0x");

        for (int i = 0; i < addressNoPrefix.length(); i++) {
            if (Character.digit(hash.charAt(i), 16) >= 8)
                result.append(Character.toUpperCase(addressNoPrefix.charAt(i)));
            else
                result.append(addressNoPrefix.charAt(i));
        }

        return result.toString();
    }

}
