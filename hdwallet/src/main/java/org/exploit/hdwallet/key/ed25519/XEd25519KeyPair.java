package org.exploit.hdwallet.key.ed25519;

import org.exploit.crypto.constant.SupportedCurve;
import org.exploit.crypto.curve.Ed25519Provider;
import org.exploit.crypto.key.ed25519.Ed25519KeyPair;
import org.exploit.crypto.key.ed25519.Ed25519PrivateKey;
import org.exploit.crypto.key.ed25519.Ed25519PublicKey;
import org.exploit.ed25519.Ed25519PointOps;
import org.exploit.hdwallet.key.XKeyPair;
import org.exploit.hdwallet.key.XPrivateKey;
import org.exploit.hdwallet.key.XPublicKey;

public class XEd25519KeyPair extends XKeyPair<Ed25519PointOps> {
    public XEd25519KeyPair(XEd25519PrivateKey xPrivateKey, XEd25519PublicKey xPublicKey) {
        super(xPrivateKey, xPublicKey);
    }

    @Override
    public Ed25519KeyPair asECKeyPair() {
        return new Ed25519KeyPair(
                (Ed25519PrivateKey) xPrivateKey().asECPrivateKey(),
                (Ed25519PublicKey) xPublicKey().asECPublicKey()
        );
    }

    @Override
    public XPrivateKey newPrivateKey(int childIndex, byte[] il, byte[] newChainCode, byte[] parentFingerprint, int depth) {
        var newPrivateKey = Ed25519PrivateKey.create(il);
        return new XEd25519PrivateKey(newPrivateKey, newChainCode, parentFingerprint, depth, childIndex);
    }

    @Override
    public XPublicKey<Ed25519PointOps> newPublicKey(XPrivateKey privateKey, byte[] il, byte[] chainCode, byte[] parentFingerprint, int depth, int index) {
        if (privateKey == null) {
            throw new UnsupportedOperationException("Ed25519 does not support public key derivation. Private key is required.");
        }

        var edPrivateKey = (Ed25519PrivateKey) privateKey.asECPrivateKey();
        var publicKey = (Ed25519PublicKey) Ed25519Provider.getInstance().getPublicKey(edPrivateKey);

        return new XEd25519PublicKey(publicKey, chainCode, parentFingerprint, depth, index);
    }

    @Override
    public XKeyPair<Ed25519PointOps> newKeyPair(XPrivateKey xPrivateKey, XPublicKey<Ed25519PointOps> xPublicKey) {
        return new XEd25519KeyPair((XEd25519PrivateKey) xPrivateKey, (XEd25519PublicKey) xPublicKey);
    }

    @Override
    public SupportedCurve curve() {
        return SupportedCurve.ED25519;
    }
}
