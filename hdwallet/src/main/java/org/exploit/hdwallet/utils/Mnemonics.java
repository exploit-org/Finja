package org.exploit.hdwallet.utils;

import org.exploit.crypto.Hash;
import org.exploit.hdwallet.model.Mnemonic;
import org.exploit.tss.util.ZKRandom;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public final class Mnemonics {
    private Mnemonics() {
    }

    public static Mnemonic generateMnemonic(byte[] entropy) {
        var wordList = Bip39.getWordList();

        var hash = Hash.sha256(entropy);
        var bits = computeMnemonicBits(entropy, hash);

        var words = computeWordsFromBits(bits, wordList);

        return new Mnemonic(String.join(" ", words).toCharArray());
    }

    private static boolean[] computeMnemonicBits(byte[] entropy, byte[] hash) {
        var entropyBitLength = entropy.length * 8;
        var checksumBitLength = entropyBitLength / 32;
        var totalBitLength = entropyBitLength + checksumBitLength;

        var bits = new boolean[totalBitLength];

        for (int i = 0; i < entropyBitLength; i++)
            bits[i] = (entropy[i / 8] & (1 << (7 - (i % 8)))) != 0;

        for (int i = 0; i < checksumBitLength; i++)
            bits[entropyBitLength + i] = (hash[i / 8] & (1 << (7 - (i % 8)))) != 0;

        return bits;
    }

    private static List<String> computeWordsFromBits(boolean[] bits, List<String> wordList) {
        var words = new ArrayList<String>();

        for (int i = 0; i < bits.length / 11; i++) {
            var index = 0;

            for (int j = 0; j < 11; j++) {
                index <<= 1;

                if (bits[i * 11 + j])
                    index |= 0x1;
            }

            words.add(wordList.get(index));
        }

        return words;
    }

    public static byte[] generateEntropy(int bits) {
        validateLength(bits);

        return ZKRandom.getRandom().generateSeed(bits / 8);
    }

    private static void validateLength(int length) {
        boolean isValidLength = Arrays.stream(ALLOWED_ENTROPY_LENGTH).anyMatch(l -> l == length);

        if (!isValidLength) {
            throw new IllegalArgumentException("Entropy should be one of " + Arrays.toString(ALLOWED_ENTROPY_LENGTH));
        }
    }

    private static final int[] ALLOWED_ENTROPY_LENGTH = new int[]{128, 160, 192, 224, 256};
}