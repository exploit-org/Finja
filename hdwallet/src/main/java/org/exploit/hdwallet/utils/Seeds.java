package org.exploit.hdwallet.utils;

import org.exploit.hdwallet.exception.SeedCreateException;
import org.exploit.hdwallet.model.Mnemonic;
import org.exploit.hdwallet.model.Seed;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

public final class Seeds {
    private Seeds() {
    }

    private static final String PBKDF2_ALGORITHM = "PBKDF2WithHmacSHA512";
    private static final int PBKDF2_ITERATIONS = 2048;
    private static final int PBKDF2_KEY_LENGTH = 512;

    public static Seed create(char[] mnemonic, char[] passphrase) {
        var prefix = "mnemonic".getBytes(StandardCharsets.UTF_8);
        var charset = StandardCharsets.UTF_8;
        var byteBuffer = charset.encode(CharBuffer.wrap(passphrase));
        var passphraseBytes = new byte[byteBuffer.remaining()];
        byteBuffer.get(passphraseBytes);

        var salt = new byte[prefix.length + passphraseBytes.length];
        System.arraycopy(prefix, 0, salt, 0, prefix.length);
        System.arraycopy(passphraseBytes, 0, salt, prefix.length, passphraseBytes.length);

        var spec = new PBEKeySpec(mnemonic, salt, PBKDF2_ITERATIONS, PBKDF2_KEY_LENGTH);
        try {
            var skf = SecretKeyFactory.getInstance(PBKDF2_ALGORITHM);
            return new Seed(skf.generateSecret(spec).getEncoded());
        } catch (Exception e) {
            throw new SeedCreateException(e);
        } finally {
            Arrays.fill(mnemonic, '\0');
            Arrays.fill(passphrase, '\0');
            Arrays.fill(salt, (byte) 0);
            Arrays.fill(passphraseBytes, (byte) 0);
        }
    }

    public static Seed create(char[] mnemonic) {
        return create(mnemonic, new char[0]);
    }

    public static Seed create(Mnemonic mnemonic, char[] password) {
        return create(mnemonic.value(), password);
    }

    public static Seed create(Mnemonic mnemonic) {
        return create(mnemonic.value());
    }
}