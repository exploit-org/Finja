package org.exploit.finja.tests.bitcoin;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.exploit.blockbook.btc.BitcoinBlockBookExplorer;
import org.exploit.btc.BitcoinProvider;
import org.exploit.btc.constant.AddressType;
import org.exploit.btc.constant.BitcoinNetworkBytes;
import org.exploit.btc.constant.FeePolicy;
import org.exploit.btc.fee.BitcoinCoreFeeProvider;
import org.exploit.btc.model.BitcoinMeta;
import org.exploit.crypto.WIF;
import org.exploit.finja.core.constant.AmountUnit;
import org.exploit.finja.core.constant.Flag;
import org.exploit.finja.core.constant.NetworkType;
import org.exploit.finja.core.key.InMemoryKey;
import org.exploit.finja.core.model.Amount;
import org.exploit.finja.core.model.Recipient;
import org.exploit.finja.core.model.WebData;
import org.exploit.jettyx.auth.Authorization;
import org.exploit.jettyx.auth.HeaderAuth;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.security.Security;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class TransactionTest {
    private static final Authorization auth = new HeaderAuth("api-key", System.getenv("NOWNODES_API_KEY"));
    private final BitcoinBlockBookExplorer explorer = new BitcoinBlockBookExplorer(
            WebData.create("https://btcbook-testnet.nownodes.io", auth)
    );

    private final BitcoinProvider provider = BitcoinProvider.newBuilder()
            .meta(new BitcoinMeta(NetworkType.TEST, AddressType.TAPROOT, FeePolicy.NORMAL))
            .feeProvider(new BitcoinCoreFeeProvider(WebData.create("https://btc-testnet.nownodes.io", auth)))
            .explorer(explorer)
            .build();

    @BeforeEach
    public void init() {
        Security.addProvider(new BouncyCastleProvider());
    }

    @Test
    public void legacyTransactionTest() {
        var bitcoinPrivateKey = System.getenv("BITCOIN_PRIVATE_KEY").getBytes();
        var privateKey = WIF.recoverKey(bitcoinPrivateKey, BitcoinNetworkBytes.PRIVATE_KEY_TESTNET).encoded();

        var wallet = provider.createWallet(NetworkType.TEST, AddressType.LEGACY,
                new InMemoryKey(provider.curve(), privateKey));

        var amount = new Amount(new BigDecimal("0.0001"), AmountUnit.HUMAN);
        var targetAddress = "mzvzgZPnbUz5voYgLX7JNE4DUrMxDrZULi";

        var tx = wallet.transaction(targetAddress, amount);
        var receipt = tx.send();

        var txid = receipt.txid();
        assertNotNull(txid);

        var transaction = explorer.api().getTransaction(txid).body();
        assertFalse(transaction.getVout().stream().filter(v -> v.getAddresses().contains(targetAddress)).findFirst()
                .isEmpty());
    }

    @Test
    public void segWitTransactionTest() {
        var bitcoinPrivateKey = System.getenv("BITCOIN_PRIVATE_KEY").getBytes();
        var privateKey = WIF.recoverKey(bitcoinPrivateKey, BitcoinNetworkBytes.PRIVATE_KEY_TESTNET).encoded();

        var wallet = provider.createWallet(NetworkType.TEST, AddressType.SEGWIT,
                new InMemoryKey(provider.curve(), privateKey));

        var amount = new Amount(new BigDecimal("0.0001"), AmountUnit.HUMAN);
        var targetAddress = "tb1qq90syhtwm4mj5e4eu9qu20zgz67dwdse3xcvsc";

        var tx = wallet.transaction(targetAddress, amount);
        var receipt = tx.send();

        var txid = receipt.txid();
        assertNotNull(txid);

        var transaction = explorer.api().getTransaction(txid).body();
        assertFalse(transaction.getVout().stream().filter(v -> v.getAddresses().contains(targetAddress)).findFirst()
                .isEmpty());
    }

    @Test
    public void taprootTransactionTest() {
        var bitcoinPrivateKey = System.getenv("BITCOIN_PRIVATE_KEY").getBytes();

        var privateKey = WIF.recoverKey(bitcoinPrivateKey, BitcoinNetworkBytes.PRIVATE_KEY_TESTNET).encoded();

        var wallet = provider.createWallet(NetworkType.TEST, AddressType.TAPROOT,
                new InMemoryKey(provider.curve(), privateKey));

        var amount = new Amount(new BigDecimal("0.0001"), AmountUnit.HUMAN);
        var targetAddress = "tb1psl24d6d8nrxwnrxlqh4qt6udmjaasnfge485s4lldw6lms2excns6wzaya";

        var tx = wallet.transaction(targetAddress, amount);
        var receipt = tx.send();

        var txid = receipt.txid();
        assertNotNull(txid);

        var transaction = explorer.api().getTransaction(txid).body();
        assertFalse(transaction.getVout().stream().filter(v -> v.getAddresses().contains(targetAddress)).findFirst()
                .isEmpty());
    }

    @Test
    public void testBigTransaction() {
        var wif1 = WIF.recoverKey(
                System.getenv("WIF_KEY1").getBytes(),
                BitcoinNetworkBytes.PRIVATE_KEY_TESTNET
        );

        var wallet1 = provider.createWallet(
                NetworkType.TEST,
                AddressType.LEGACY,
                new InMemoryKey(provider.curve(), wif1.encoded())
        );

        var wif2 = WIF.recoverKey(
                System.getenv("WIF_KEY2").getBytes(),
                BitcoinNetworkBytes.PRIVATE_KEY_TESTNET
        );

        var wallet2 = provider.createWallet(
                NetworkType.TEST,
                AddressType.LEGACY,
                new InMemoryKey(provider.curve(), wif2.encoded())
        );

        var bigBitcoinWallet = provider.createBigWallet(List.of(wallet1, wallet2));

        var recipients = List.of(
                Recipient.create(
                        System.getenv("RECIPIENT_ADDRESS"),
                        new Amount(new BigDecimal(System.getenv("RECIPIENT_AMOUNT")), AmountUnit.HUMAN)
                )
        );

        var tx = bigBitcoinWallet.transaction(
                recipients,
                System.getenv("CHANGE_ADDRESS"),
                Flag.INCLUDE_FEE
        );

        var receipt = tx.send();
        assertNotNull(receipt.txid());
    }
}
