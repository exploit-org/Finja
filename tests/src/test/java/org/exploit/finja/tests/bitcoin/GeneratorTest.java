package org.exploit.finja.tests.bitcoin;

import org.exploit.btc.BitcoinProvider;
import org.exploit.btc.constant.AddressType;
import org.exploit.btc.constant.BitcoinNetworkBytes;
import org.exploit.crypto.WIF;
import org.exploit.crypto.key.secp256k1.Secp256k1KeyPair;
import org.exploit.crypto.key.secp256k1.Secp256k1PrivateKey;
import org.exploit.finja.core.constant.NetworkType;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class GeneratorTest {
    private final BitcoinProvider provider = BitcoinProvider.newBuilder().build();

    @Test
    public void assertValidSegWitGeneration() {
        var publicAddress = "bc1q7jrlxzrehll376nstkjy8l3nur089g46zpkkyq";
        var privateKey = WIF.recoverKey("L2PYGrFAgmBZtpxH3bLbR96BSgPwqCnSZEtHr6jd3A5ehAWugFnN".getBytes(),
                BitcoinNetworkBytes.PRIVATE_KEY_MAINNET);

        var keyPair = Secp256k1KeyPair.create(privateKey);
        var generated = provider.generator(NetworkType.MAIN, AddressType.SEGWIT).generate(keyPair);

        assertEquals(generated.publicAddress(), publicAddress);
    }

    @Test
    public void assertValidLegacyGeneration() {
        var publicAddress = "1CBXWKjpmzRM4mbrGkEpN9gi1FKFk3xYUT";
        var privateKey = WIF.recoverKey("L1c6zrmDyrfWe1cMwfZ3Rkttv7ABht4pP8maUKqPVvcQYXpkJX2c".getBytes(),
                BitcoinNetworkBytes.PRIVATE_KEY_MAINNET);

        var keyPair = Secp256k1KeyPair.create(privateKey);
        var generated = provider.generator(NetworkType.MAIN, AddressType.LEGACY).generate(keyPair);

        assertEquals(generated.publicAddress(), publicAddress);
    }

    @Test
    public void assertValidTestnetLegacyGeneration() {
        var publicAddress = "mokx5q7kjv2LoMF6V2nLF7mRCKhnRBBNHW";
        var privateKey = WIF.recoverKey("cRhfALreGcdyRUEMvQ482fovn8JPreg1bQznNfiFXT4tFC6MspVC".getBytes(),
                BitcoinNetworkBytes.PRIVATE_KEY_TESTNET);

        var keyPair = Secp256k1KeyPair.create(privateKey);
        var generated = provider.generator(NetworkType.TEST, AddressType.LEGACY).generate(keyPair);

        assertEquals(generated.publicAddress(), publicAddress);

        var generatedWIF = WIF.create(Secp256k1PrivateKey.create(generated.privateKey()), BitcoinNetworkBytes.PRIVATE_KEY_TESTNET);
        assertEquals(generatedWIF, "cRhfALreGcdyRUEMvQ482fovn8JPreg1bQznNfiFXT4tFC6MspVC");
    }
}
