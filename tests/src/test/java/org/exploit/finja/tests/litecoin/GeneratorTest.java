package org.exploit.finja.tests.litecoin;

import org.exploit.btc.constant.AddressType;
import org.exploit.crypto.WIF;
import org.exploit.crypto.key.secp256k1.Secp256k1KeyPair;
import org.exploit.finja.core.constant.NetworkType;
import org.exploit.ltc.LitecoinProvider;
import org.exploit.ltc.constant.LitecoinNetworkBytes;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class GeneratorTest {
    private final LitecoinProvider provider = LitecoinProvider.newBuilder().build();

    @Test
    public void assertValidLegacyGeneration() {
        var privateKey = WIF.recoverKey("TAfVhqggdKLdPVA6ArcqsqJQLXSqM1CZaMXEdQYf2xRYSvhf1RTD".getBytes(), LitecoinNetworkBytes.PRIVATE_KEY_MAINNET);
        var keyPair = Secp256k1KeyPair.create(privateKey);

        var generated = provider.generator(NetworkType.MAIN, AddressType.LEGACY).generate(keyPair);
        assertEquals("LLx4PTn8iygqdvvthosN1DNBEPSthNbihb", generated.publicAddress());
    }

    @Test
    public void assertValidSegWitGeneration() {
        var privateKey = WIF.recoverKey("TBLFjicoNJ1enc19W3eAZxPYaaRwoFVAvYBHDuAjs2JAhxJu8Qy2".getBytes(), LitecoinNetworkBytes.PRIVATE_KEY_MAINNET);
        var keyPair = Secp256k1KeyPair.create(privateKey);

        var generated = provider.generator(NetworkType.MAIN, AddressType.SEGWIT).generate(keyPair);
        assertEquals("ltc1qtkqj7n5l6r5fhla3fc4jak0a7lapafqvprwp3c", generated.publicAddress());
    }
}
