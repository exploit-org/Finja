package org.exploit.finja.tests.crypto;

import org.exploit.crypto.Hash;
import org.exploit.crypto.curve.Ed25519Provider;
import org.exploit.crypto.curve.Secp256k1Provider;
import org.exploit.gmp.BigInt;
import org.exploit.tss.TSS;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class SignatureTest {
    static {
        TSS.loadLibraries();
    }

    @Test
    public void testSchnorr() {
        var keyPair = Secp256k1Provider.getInstance().generateKeyPair();

        var message = "Hi, World!".getBytes();
        var hash = Hash.sha256(message);

        var signature = Secp256k1Provider.getInstance().schnorr()
                .sign(keyPair.privateKey(), hash);

        assertTrue(Secp256k1Provider.getInstance().schnorr().verify(keyPair.publicKey(), hash, signature));
    }

    @Test
    public void testEcdsa() {
        var keyPair = Secp256k1Provider.getInstance().generateKeyPair();
        var message = "Hi, World!".getBytes();
        var hash = Hash.sha256(message);
        var signature = Secp256k1Provider.getInstance().sign(hash, keyPair);

        assertTrue(Secp256k1Provider.getInstance().verify(hash, signature, keyPair.publicKey()));
    }

    @Test
    public void testEdDsa() {
        var keyPair = Ed25519Provider.getInstance().generateKeyPair();
        var message = "Hi, World!".getBytes();
        var hash = Hash.sha256(message);

        var signature = Ed25519Provider.getInstance().sign(hash, keyPair);

        assertTrue(Ed25519Provider.getInstance().verify(hash, signature, keyPair.publicKey()));
    }

    public static void main(String[] args) {
        var keyPair = Secp256k1Provider.getInstance().generateKeyPair();
        var publicKey = keyPair.publicKey();
        var getPublicKey = Secp256k1Provider.getInstance().getPublicKey(keyPair.privateKey());
        System.out.println(publicKey.point().getAffineX());
        System.out.println(new BigInt(1, getPublicKey.x()));

        System.out.println(publicKey.hex());
        System.out.println(getPublicKey.hex());
    }
}
