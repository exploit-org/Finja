package org.exploit.finja.tests.hdwallet;

import org.bouncycastle.util.encoders.Hex;
import org.exploit.btc.BitcoinProvider;
import org.exploit.btc.constant.AddressType;
import org.exploit.crypto.constant.SupportedCurve;
import org.exploit.crypto.key.ECKeyPair;
import org.exploit.ed25519.Ed25519PointOps;
import org.exploit.finja.core.constant.NetworkType;
import org.exploit.finja.core.model.WebData;
import org.exploit.hdwallet.HDWallet;
import org.exploit.hdwallet.model.Mnemonic;
import org.exploit.hdwallet.model.Seed;
import org.exploit.hdwallet.utils.MasterKeys;
import org.exploit.hdwallet.utils.Seeds;
import org.exploit.jettyx.auth.NoAuth;
import org.exploit.secp256k1.Secp256k1PointOps;
import org.exploit.sol.SolanaProvider;
import org.exploit.tss.TSS;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class DerivationTest {
    static {
        TSS.loadLibraries();
    }

    private final BitcoinProvider provider = BitcoinProvider.newBuilder().build();

    @Test
    public void derivationTest() {
        var mnemonicString = "face fog abuse razor grab person hole exit spider office eagle elite easily plug book puppy axis link crush salt enable grab surprise later"
                .toCharArray();

        var seed = Seeds.create(new Mnemonic(mnemonicString));

        var wallet = new HDWallet(seed);

        var curve = SupportedCurve.SECP256K1;

        var account0 = wallet.derive(curve, "m/84'/0'/0'/0/0");
        var account1 = wallet.derive(curve, "m/84'/0'/0'/0/1");
        var account2 = wallet.derive(curve, "m/84'/0'/0'/0/2");
        var account9 = wallet.derive(curve, "m/84'/0'/0'/0/9");

        var generator = provider.generator(NetworkType.MAIN, AddressType.SEGWIT);

        var wallet0 = generator.generate((ECKeyPair<Secp256k1PointOps>) account0.asECKeyPair());
        var wallet1 = generator.generate((ECKeyPair<Secp256k1PointOps>)account1.asECKeyPair());
        var wallet2 = generator.generate((ECKeyPair<Secp256k1PointOps>)account2.asECKeyPair());
        var wallet9 = generator.generate((ECKeyPair<Secp256k1PointOps>)account9.asECKeyPair());

        assertEquals("bc1qe2yp8n3h3s6jujyzs3j4lgfz23r60w09selpxn", wallet0.publicAddress());
        assertEquals("bc1qtmswxxxvmsuc882ansax59dq0rggu7uh9fqdgv", wallet1.publicAddress());
        assertEquals("bc1q5djmpfgjecd2676pdync5prunnehsum2n9lqva", wallet2.publicAddress());
        assertEquals("bc1q0gauk85k2cehpf9qc87vqd2t3r39k9jjhkjzqq", wallet9.publicAddress());
    }

    @Test
    public void testSLIP0010Ed25519() {
        byte[] seedBytes = Hex.decode("000102030405060708090a0b0c0d0e0f");
        Seed seed = new Seed(seedBytes);

        var masterKeyPair = MasterKeys.create(seed, SupportedCurve.ED25519);

        assertEquals("2b4be7f19ee27bbf30c667b642d5f4aa69fd169872f8fc3059c08ebae2eb19e7",
                masterKeyPair.xPrivateKey().asECPrivateKey().hex());
        assertEquals("90046a93de5380a72b5e45010748567d5ea02bbf6522f979e05c0d8d8ca9fffb",
                Hex.toHexString(masterKeyPair.xPrivateKey().chainCode()));
    }

    @Test
    public void derivationSlip0010Test() {
        var solana = SolanaProvider.newBuilder()
                .node(WebData.create("https://example.com", new NoAuth()))
                .build();

        var curve = SupportedCurve.ED25519;
        var seed = Seeds.create("scissors stem live radio panel divert board nuclear lawn ridge gain woman".toCharArray());
        var wallet = new HDWallet(seed);

        var result = wallet.derive(curve, "m/44/501/0");
        var generated = solana.generator().generate((ECKeyPair<Ed25519PointOps>) result.asECKeyPair());
        assertEquals(generated.publicAddress(), "6VnMEP5VrvNcHG3hBMhWntyBXedBjWho2TYcyzkTt2Kf");
    }
}
