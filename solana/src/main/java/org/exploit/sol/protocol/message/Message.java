package org.exploit.sol.protocol.message;

import lombok.Getter;
import lombok.Setter;
import org.exploit.crypto.key.ECPublicKey;
import org.exploit.ed25519.Ed25519PointOps;
import org.exploit.sol.instruction.Instruction;
import org.exploit.sol.protocol.AccountKeyManager;
import org.exploit.sol.protocol.AccountMeta;

import java.util.ArrayList;
import java.util.List;

@Getter
public class Message {
    public static final int RECENT_BLOCK_HASH_LENGTH = 32;

    @Getter
    private MessageHeader messageHeader;
    @Getter
    private String recentBlockhash;

    @Getter
    @Setter
    private ECPublicKey<Ed25519PointOps> feePayer;

    private final AccountKeyManager accountKeyManager = new AccountKeyManager();
    private final List<Instruction> instructions = new ArrayList<>();
    private final MessageSerializer serializer = new MessageSerializer(this);

    public byte[] serialize() {
        return serializer.serialize();
    }

    public void addInstruction(Instruction instruction) {
        accountKeyManager.addAccounts(instruction.getAccounts());
        accountKeyManager.addAccount(new AccountMeta(instruction.getProgramId(), false, false));

        this.instructions.add(instruction);
    }

    public void setRecentBlockHash(String recentBlockhash) {
        this.recentBlockhash = recentBlockhash;
    }

    public List<AccountMeta> getSortedAccountKeys() {
        return accountKeyManager.getSortedAccountKeys(feePayer);
    }

    public List<Instruction> getInstructions() {
        return new ArrayList<>(instructions);
    }

    public void initMessageHeader() {
        this.messageHeader = new MessageHeader();
    }
}