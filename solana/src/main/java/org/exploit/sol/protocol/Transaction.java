package org.exploit.sol.protocol;

import lombok.Builder;
import lombok.Data;
import org.exploit.crypto.key.ECPublicKey;
import org.exploit.finja.core.key.ECKeyManager;
import org.exploit.sol.instruction.Instruction;
import org.exploit.sol.protocol.message.Message;
import org.exploit.sol.util.ShortVec;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

@Data
@Builder(builderMethodName = "newBuilder")
public class Transaction {
    public static final int SIGNATURE_LENGTH = 64;
    public static final int PUBLIC_KEY_LENGTH = 32;

    private final String recentBlockHash;
    private final List<? extends Instruction> instructions;
    private final ECPublicKey feePayer;

    @Builder.Default
    private final List<byte[]> signatures = new ArrayList<>();

    public void sign(ECKeyManager keyManager) {
        var message = createMessage();
        var signature = keyManager.sign(message.serialize());
        signatures.add(signature.encode());
    }

    private Message createMessage() {
        var message = new Message();
        message.setRecentBlockHash(recentBlockHash);
        message.setFeePayer(feePayer);

        for (var instruction : instructions) {
            message.addInstruction(instruction);
        }

        return message;
    }

    public byte[] serialize() {
        var message = createMessage();
        var serializedMessage = message.serialize();

        try (var out = new ByteArrayOutputStream()) {
            out.write(ShortVec.encodeLength(signatures.size()));

            for (var signature : signatures) {
                out.write(signature);
            }

            out.write(serializedMessage);

            return out.toByteArray();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public String toMessage64() {
        return Base64.getEncoder().encodeToString(createMessage().serialize());
    }

    public String toBase64() {
        return Base64.getEncoder().encodeToString(serialize());
    }
}