package org.exploit.sol.instruction;

import lombok.Data;
import org.exploit.crypto.Base58;
import org.exploit.crypto.key.ECPublicKey;
import org.exploit.crypto.key.ed25519.Ed25519PublicKey;
import org.exploit.ed25519.Ed25519PointOps;
import org.exploit.sol.protocol.AccountMeta;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.List;

@Data
public class TransferInstruction implements Instruction {
    private static final ECPublicKey<Ed25519PointOps> PROGRAM_ID = Ed25519PublicKey.create(
            Base58.getInstance().decode("11111111111111111111111111111111")
    );

    private ECPublicKey<Ed25519PointOps> from;
    private ECPublicKey<Ed25519PointOps> to;
    private long lamports;

    public TransferInstruction(ECPublicKey<Ed25519PointOps> from, ECPublicKey<Ed25519PointOps> to, long lamports) {
        this.from = from;
        this.to = to;
        this.lamports = lamports;
    }

    public TransferInstruction(String from, String to, long lamports) {
        this(
            Ed25519PublicKey.create(Base58.getInstance().decode(from)),
            Ed25519PublicKey.create(Base58.getInstance().decode(to)),
            lamports
        );
    }

    @Override
    public byte[] getData() {
        return ByteBuffer.allocate(12)
                .order(ByteOrder.LITTLE_ENDIAN)
                .putInt(2)
                .putLong(lamports)
                .array();
    }

    @Override
    public List<AccountMeta> getAccounts() {
        var from = new AccountMeta(this.from, true, true);
        var to = new AccountMeta(this.to, false, true);

        return List.of(from, to);
    }

    @Override
    public ECPublicKey<Ed25519PointOps> getProgramId() {
        return PROGRAM_ID;
    }
}
