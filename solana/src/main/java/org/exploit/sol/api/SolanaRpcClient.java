package org.exploit.sol.api;

import com.fasterxml.jackson.databind.JavaType;
import org.exploit.finja.api.JsonRpcApi;
import org.exploit.finja.core.model.JsonRpc;
import org.exploit.finja.core.model.WebData;
import org.exploit.finja.utils.Jackson;
import org.exploit.sol.model.*;
import org.exploit.sol.model.request.Commitment;
import org.exploit.sol.model.request.Encoding;
import org.exploit.sol.model.request.SearchTransactionHistory;

import java.util.Collections;
import java.util.List;

public class SolanaRpcClient {
    private final JsonRpcApi api;

    public SolanaRpcClient(WebData api) {
        this.api = api.newApiClient(JsonRpcApi.class);
    }

    public RpcResult<AccountInfo> getAccountInfo(String account) {
        return resultFor("getAccountInfo", List.of(account, new Encoding()), AccountInfo.class);
    }

    public RpcResult<Balance> getBalance(String account) {
        return resultFor("getBalance", List.of(account), Balance.class);
    }

    public RpcResult<Block> getBlock(long height) {
        return resultFor("getBlock", List.of(height), Block.class);
    }

    public RpcResult<SignatureStatuses> getSignatureStatus(List<String> addresses) {
        return resultFor("getSignatureStatuses", List.of(addresses, new SearchTransactionHistory()), SignatureStatuses.class);
    }

    public RpcResult<BlockCommitment> getBlockCommitment(long id) {
        return resultFor("getBlockCommitment", List.of(id), BlockCommitment.class);
    }

    public RpcResult<Long> getBlockHeight() {
        return resultFor("getBlockHeight", Collections.emptyList(), Long.class);
    }

    public RpcResult<FeeForMessage> getFeeForMessage(String base64msg, Commitment commitment) {
        return resultFor("getFeeForMessage", List.of(base64msg, commitment), FeeForMessage.class);
    }

    public RpcResult<LatestBlockHash> getLatestBlockHash(Commitment commitment) {
        return resultFor("getLatestBlockhash", List.of(commitment), LatestBlockHash.class);
    }

    public RpcResult<SplTokenBalance> getTokenAccountBalance(String account) {
        return resultFor("getTokenAccountBalance", List.of(account), SplTokenBalance.class);
    }

    public RpcResult<List<TransactionSignature>> getSignaturesForAddress(String address) {
        return resultFor("getSignaturesForAddress", List.of(address), Jackson.createListType(TransactionSignature.class));
    }

    public RpcResult<Transaction> getTransaction(String signature) {
        return resultFor("getTransaction", List.of(signature, "jsonParsed"), Transaction.class);
    }

    public RpcResult<String> sendTransaction(String base64) {
        return resultFor("sendTransaction", List.of(base64, new Encoding("base64")), String.class);
    }

    public RpcResult<SimulatedTransaction> simulateTransaction(String base64) {
        return resultFor("simulateTransaction", List.of(base64, new Encoding("base64")), SimulatedTransaction.class);
    }

    public <T> RpcResult<T> resultFor(String method, List<Object> params, Class<T> clazz) {
        return resultFor(rpc(method, params), clazz);
    }

    public <T> RpcResult<T> resultFor(String method, List<Object> params, JavaType type) {
        return resultFor(rpc(method, params), type);
    }

    private JsonRpc rpc(String method, List<Object> params) {
        return JsonRpc.newBuilder()
                .method(method)
                .params(params)
                .build();
    }

    private <T> RpcResult<T> resultFor(JsonRpc rpc, Class<T> clazz) {
        return resultFor(rpc, Jackson.getObjectMapper().getTypeFactory().constructType(clazz));
    }

    private <T> RpcResult<T> resultFor(JsonRpc rpc, JavaType type) {
        var node = api.send(rpc);
        return Jackson.convert(node, Jackson.createParameterType(RpcResult.class, type));
    }
}
