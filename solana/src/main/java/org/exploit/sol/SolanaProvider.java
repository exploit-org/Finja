package org.exploit.sol;

import lombok.Getter;
import org.exploit.crypto.Base58;
import org.exploit.crypto.constant.SupportedCurve;
import org.exploit.finja.core.*;
import org.exploit.finja.core.constant.Asset;
import org.exploit.finja.core.converter.MathConstantConverter;
import org.exploit.finja.core.key.ECKeyManager;
import org.exploit.finja.core.model.WebData;
import org.exploit.finja.listener.ListenerProvider;
import org.exploit.signalix.manager.EventScope;
import org.exploit.sol.address.SolanaWallet;
import org.exploit.sol.api.SolanaRpcClient;
import org.exploit.sol.balance.SolanaBalanceService;
import org.exploit.sol.fetcher.SolanaEventClient;
import org.exploit.sol.generator.SolanaAddressGenerator;
import org.exploit.sol.validator.SolanaAddressValidator;

@Getter
public class SolanaProvider implements CoinProvider {
    private final SolanaRpcClient client;
    private final ListenerProvider<SolanaProvider> listenerProvider;

    private SolanaProvider(WebData node, ListenerProvider<SolanaProvider> listenerProvider) {
        this.client = new SolanaRpcClient(node);
        this.listenerProvider = listenerProvider;
    }

    @Override
    public Asset asset() {
        return Asset.SOL;
    }

    @Override
    public SolanaWallet createWallet(String publicAddress, ECKeyManager keyManager) {
        return new SolanaWallet(this, publicAddress, keyManager);
    }

    @Override
    public SolanaWallet createWallet(ECKeyManager keyManager) {
        var publicAddress = Base58.getInstance().encode(keyManager.getPublicKey().encoded());
        return createWallet(publicAddress, keyManager);
    }

    @Override
    public TransactionListener listener(EventScope eventScope) {
        return listenerProvider.createListener(this, eventScope);
    }

    @Override
    public AddressGenerator generator() {
        return new SolanaAddressGenerator();
    }

    @Override
    public ValueConverter converter() {
        return new MathConstantConverter(9);
    }

    @Override
    public CoinBalanceService balanceService() {
        return new SolanaBalanceService(this);
    }

    @Override
    public EventFetcher eventFetcher() {
        return new SolanaEventClient(this);
    }

    @Override
    public AddressValidator validator() {
        return new SolanaAddressValidator();
    }

    @Override
    public SupportedCurve curve() {
        return SupportedCurve.ED25519;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public static class Builder {
        private WebData node;
        private ListenerProvider<SolanaProvider> listenerProvider;

        public Builder node(WebData node) {
            this.node = node;
            return this;
        }

        public Builder listenerProvider(ListenerProvider<SolanaProvider> listenerProvider) {
            this.listenerProvider = listenerProvider;
            return this;
        }

        public SolanaProvider build() {
            if (node == null)
                throw new IllegalStateException("Node data should be specified");

            return new SolanaProvider(node, listenerProvider);
        }
    }
}
